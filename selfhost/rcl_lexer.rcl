# -*- mode: ruby -*-

#include lib/std.rcl
#include lib/types.rcl
#include lib/json.rcl

# --------------------------------

def GO_STRINGS() return GO_ALLOC_CURSOR() + GS_ALLOC_CURSOR(); end
def GS_STRINGS() return 1000; end

def INPUT_MAX() return 60000; end

# --------------------------------

def is_ident_char(c)
  case
  when (range_include(48, 57, c)) # 0..9
    return true;
  when (range_include(65, 90, c)) # A..Z
    return true;
  when (range_include(97, 122, c)) # a..z
    return true;
  when (c == 95) # _
    return true;
  else
    return false;
  end
end

def find_non_ident_char(input_, pos_from)
  var pos = pos_from;
  var c = char_at(input_, pos);

  while (is_ident_char(c))
    pos = pos + 1;
    c = char_at(input_, pos);
  end

  return pos;
end

def match_ident(input_, pos_from)
  var pos = find_non_ident_char(input_, pos_from);
  return __sub(pos, pos_from);
end

def match_symbol(input_, pos_from)
  var c0 = char_at(input_, pos_from);
  var c1 = char_at(input_, pos_from + 1);

  case
  when (__and(c0 == 61, c1 == 61)) # ==
    return 2;
  when (__and(c0 == 33, c1 == 61)) # !=
    return 2;
  when (__and(c0 == 115, c1 == 61)) # s=
    return 2;
  when (c0 == 38) # &
    return 1;
  when (c0 == 40) # (
    return 1;
  when (c0 == 41) # )
    return 1;
  when (c0 == 42) # *
    return 1;
  when (c0 == 43) # +
    return 1;
  when (c0 == C_COMMA())
    return 1;
  when (c0 == 59) # ;
    return 1;
  when (c0 == 60) # <
    return 1;
  when (c0 == 61) # =
    return 1;
  when (c0 == 91) # [
    return 1;
  when (c0 == 93) # ]
    return 1;
  else
    return 0;
  end
end

def match_comment(input_, pos_from)
  if (char_at(input_, pos_from + 0) != 35) # #
    return 0;
  end

  return __sub(
    char_index(input_, C_LF(), pos_from),
    pos_from
  );
end

def match_int(input_, pos_from)
  var c = char_at(input_, pos_from);
  var pos;

  if (c == 45) # -
    pos = non_digit_index(input_, pos_from + 1);
  else
    pos = non_digit_index(input_, pos_from);
  end

  return __sub(pos, pos_from);
end

def is_kw(str_)
  case
  when (str_eq(str_, "def"   )) return true;
  when (str_eq(str_, "end"   )) return true;
  when (str_eq(str_, "var"   )) return true;
  when (str_eq(str_, "return")) return true;
  when (str_eq(str_, "while" )) return true;
  when (str_eq(str_, "break" )) return true;
  when (str_eq(str_, "case"  )) return true;
  when (str_eq(str_, "when"  )) return true;
  when (str_eq(str_, "else"  )) return true;
  when (str_eq(str_, "_cmt"  )) return true;
  when (str_eq(str_, "true"  )) return true;
  when (str_eq(str_, "false" )) return true;
  when (str_eq(str_, "if"    )) return true;
  when (str_eq(str_, "global")) return true;
  else
    return false;
  end
end

def print_token(kind_, str_)
  var list_ = List_new();
  # TODO lineno
  List_add_str(list_, kind_);
  List_add_str(list_, str_);
  Json_print_oneline(list_);
  putchar(C_LF());
end

def print_kw(str_)
  print_token("kw", str_);
end

def print_ident(str_)
  print_token("ident", str_);
end

def print_symbol(str_)
  print_token("sym", str_);
end

def print_int(str_)
  print_token("int", str_);
end

def print_str(str_)
  print_token("str", str_);
end

def lex()
  var [60000]input; # INPUT_MAX
  var pos = 0;
  var size;
  var s_temp_size = 40; var [40]s_temp;
  var c;

  read_stdin_all(&input, INPUT_MAX());

  while (true)
    c = char_at(&input, pos);

    if (__or(
          c == 0,
          __le(INPUT_MAX(), pos)
        ))
      break;
    end

    case
    when (__or(c == C_SPC(), c == C_LF()))
      pos = pos + 1;

    when (0 < match_comment(&input, pos))
      size = match_comment(&input, pos);
      pos = pos + size;

    when (0 < match_symbol(&input, pos))
      size = match_symbol(&input, pos);
      substr(&s_temp, &input, pos, pos + size);
      print_symbol(&s_temp);
      pos = pos + size;

    when (c == C_DQ())
      parse_str(&input, pos, &s_temp, s_temp_size, &size);
      print_str(&s_temp);
      pos = pos + size;

    when (0 < match_int(&input, pos))
      size = match_int(&input, pos);
      substr(&s_temp, &input, pos, pos + size);
      print_int(&s_temp);
      pos = pos + size;

    when (0 < match_ident(&input, pos))
      size = match_ident(&input, pos);
      substr_with_check(&s_temp, &input, pos, pos + size, s_temp_size);

      if (is_kw(&s_temp))
        if (str_eq(&s_temp, "if"))
          print_kw("case");
          print_kw("when");
        else
          print_kw(&s_temp);
        end
      else
        print_ident(&s_temp);
      end

      pos = pos + size;

    else
      p_i(pos);
      p_c(c);
      panic(239); # lex: unexpected pattern
    end
  end
end

# --------------------------------

def _main()
  lex();
end

def main()
  var [1002]g;
  var g_ = &g;

  init_globals(g_);
  init_strings();

  _main();
end
