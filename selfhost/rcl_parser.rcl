# -*- mode: ruby -*-

#include lib/std.rcl
#include lib/types.rcl
#include lib/json.rcl

# --------------------------------

def GO_STRINGS() return GO_ALLOC_CURSOR() + GS_ALLOC_CURSOR(); end
def GS_STRINGS() return 1000; end

def GO_TOKENS() return GO_STRINGS() + GS_STRINGS(); end
def GS_TOKENS() return 15000; end

def GO_TOKEN_INDEX() return GO_TOKENS() + GS_TOKENS(); end
def GS_TOKEN_INDEX() return 1; end

def GO_NUM_TOKENS() return GO_TOKEN_INDEX() + GS_TOKEN_INDEX(); end
def GS_NUM_TOKENS() return 1; end

def GO_STR_LIT_LIST() return GO_NUM_TOKENS() + GS_NUM_TOKENS(); end
def GS_STR_LIT_LIST() return 1; end

def NUM_TOKENS_MAX()
  return GS_TOKENS();
end

# --------------------------------

def mklist2(n0_, n1_)
  var list_ = List_new();

  List_add(list_, n0_);
  List_add(list_, n1_);

  return list_;
end

def mklist3(n0_, n1_, n2_)
  var list_ = mklist2(n0_, n1_);

  List_add(list_, n2_);

  return list_;
end

# --------------------------------

def get_tokens()
  var g_ = get_g_main();
  return g_ + GO_TOKENS();
end

def get_line_size(input_, pos_from)
  var pos_to;
  var lf_pos = char_index(input_, C_LF(), pos_from);

  if (lf_pos != -1)
    pos_to = lf_pos + 1;
  else
    # LF not found
    pos_to = char_index(input_, 0, pos_from);
  end

  return __sub(pos_to, pos_from);
end

def set_token(ti, t_)
  var tokens_;

  if (__le(NUM_TOKENS_MAX(), ti))
    p_i(NUM_TOKENS_MAX());
    p_i(ti);
    panic(27); # set_token: capacity over
  end

  tokens_ = get_tokens();
  aset(tokens_, ti, t_);
end

def read_token(input_, pos, size)
  var line_size = 80; var [80]line;
  var sep_i;
  var [6]kind_str;
  var value_str_size = 64; var [64]value_str;
  var t_;

  substr_with_check(&line, input_, pos, pos + size, line_size);
  chomp(&line);

  var list_ = Json_parse(&line);

  t_ = Token_new(
    List_get_as_str(list_, 0),
    List_get_as_str(list_, 1)
  );
  return t_;
end

def read_tokens(g_)
  var size;
  var pos = 0;
  var t_;
  var ti = 0;
  var input_size_max = 180000; var [180000]input;
  check_heap_stack_overlap();

  read_stdin_all(&input, input_size_max);

  while (true)
    size = get_line_size(&input, pos);
    if (size == 0)
      break;
    end

    t_ = read_token(&input, pos, size);
    set_token(ti, t_);
    ti = ti + 1;

    pos = pos + size;
  end

  set_num_tokens(ti); # ti == number of tokens
end

def set_num_tokens(num_tokens)
  var g_ = get_g_main();
  *(g_ + GO_NUM_TOKENS()) = num_tokens;
end

def get_num_tokens()
  var g_ = get_g_main();
  return *(g_ + GO_NUM_TOKENS());
end

def is_end()
  var g_ = get_g_main();
  var num_tokens = get_num_tokens();
  var ti = get_token_index();

  return __le(num_tokens, ti);
end

# --------------------------------

def set_token_index(ti)
  var g_ = get_g_main();
  *(g_ + GO_TOKEN_INDEX()) = ti;
end

def get_token_index()
  var g_ = get_g_main();
  return *(g_ + GO_TOKEN_INDEX());
end

def incr_token_index()
  set_token_index(
    get_token_index() + 1
  );
end

def peek(i)
  var tokens_ = get_tokens();
  var ti = get_token_index();

  return aget(tokens_, ti + i);
end

def consume_kw(str_)
  var t_ = peek(0);

  if (__and(
        Token_kind_eq(t_, TOKEN_KIND__KW()),
        Token_val_eq(t_, str_)
  ))
    incr_token_index();
  else
    print_i_e(TOKEN_KIND__KW());
    putchar_e(47); # /
    print_s_e(str_);
    putchar_e(47); # /
    putchar_e(C_LF());

    print_i_e(Token_get_kind(t_));
    putchar_e(47); # /
    print_s_e(Token_get_val(t_));
    putchar_e(47); # /
    putchar_e(C_LF());

    panic(98); # consume_kw
  end
end

def consume_sym(str_)
  var t_ = peek(0);
  if (__and(
        Token_kind_eq(t_, TOKEN_KIND__SYM()),
        Token_val_eq(t_, str_)
  ))
    incr_token_index();
  else
    p_s(str_); # expected
    p_i(Token_get_kind(t_));
    p_s(Token_get_val(t_)); # actual
    panic(117); # consume_sym: unexpected token
  end
end

# --------------------------------

def consume_sym_one_char(c)
  var [2]str;

  aset(&str, 0, c);
  aset(&str, 1, 0);

  consume_sym(&str);
end

def consume_sym_paren_l()
  consume_sym_one_char(40); # (
end

def consume_sym_paren_r()
  consume_sym_one_char(41); # )
end

def consume_sym_semicolon()
  consume_sym_one_char(59); # ;
end

def consume_sym_equal()
  consume_sym_one_char(61); # =
end

# --------------------------------

def StrLitList_init()
  var g_ = get_g_main();
  *(g_ + GO_STR_LIT_LIST()) = List_new();
end

def StrLitList_get_self()
  var g_ = get_g_main();
  return *(g_ + GO_STR_LIT_LIST());
end

def StrLitList_add(str_, offset)
  var s_o_ = List_new();
  List_add_str(s_o_, str_);
  List_add_int(s_o_, offset);

  List_add_list(StrLitList_get_self(), s_o_);
end

def StrLitList_get_str(i)
  var self_ = StrLitList_get_self();
  var s_o_ = List_get_as_list(self_, i);

  return List_get_as_str(s_o_, 0);
end

def StrLitList_get_offset(i)
  var self_ = StrLitList_get_self();
  var s_o_ = List_get_as_list(self_, i);

  return List_get_as_int(s_o_, 1);
end

def StrLitList_index(str_)
  var self_ = StrLitList_get_self();
  var s_temp_;
  var i;

  i = 0;
  while (i < List_size(self_))
    s_temp_ = StrLitList_get_str(i);
    if (str_eq(s_temp_, str_))
      return i;
    end
    i = i + 1;
  end

  return -1;
end

def StrLitList_get_new_offset()
  var self_ = StrLitList_get_self();
  var last_str_;
  var last_offset;
  var size;

  size = List_size(self_);
  if (size == 0)
    return 0;
  end

  var last_i = __sub(size, 1);
  last_str_   = StrLitList_get_str(   last_i);
  last_offset = StrLitList_get_offset(last_i);
  return last_offset + str_size(last_str_) + 1;
end

# --------------------------------

def _parse_arg()
  var n;
  var t_ = peek(0);
  incr_token_index();

  case
  when (Token_kind_eq(t_, TOKEN_KIND__IDENT()))
    return Node_new_str(Token_get_val(t_));
  else
    panic(202); # _parse_arg: unsupported
  end
end

def parse_args()
  var args_;
  var t_;
  var arg_node_;
  var [2]s_comma;

  aset(&s_comma, 0, C_COMMA());
  aset(&s_comma, 1,  0);

  args_ = List_new();

  t_ = peek(0);

  if (char_at(Token_get_val(t_), 0) == 41) # )
    return args_;
  end

  arg_node_ = _parse_arg();
  List_add(args_, arg_node_);

  while (true)
    t_ = peek(0);

    if (char_at(Token_get_val(t_), 0) != C_COMMA())
      break;
    end

    consume_sym(&s_comma);
    arg_node_ = _parse_arg();
    List_add(args_, arg_node_);
  end

  return args_;
end

def parse_exprs()
  var g_ = get_g_main();
  var exprs_;
  var t_;
  var expr_node_;
  var [2]s_comma;

  aset(&s_comma, 0, C_COMMA());
  aset(&s_comma, 1,  0);

  exprs_ = List_new();

  t_ = peek(0);

  if (char_at(Token_get_val(t_), 0) == 41) # )
    return exprs_;
  end

  expr_node_ = parse_expr(g_);
  List_add(exprs_, expr_node_);

  while (true)
    t_ = peek(0);

    if (char_at(Token_get_val(t_), 0) != C_COMMA())
      break;
    end

    consume_sym(&s_comma);
    expr_node_ = parse_expr(g_);
    List_add(exprs_, expr_node_);
  end

  return exprs_;
end

def _parse_var_declare()
  var t_;
  var var_name_;
  check_heap_stack_overlap();

  consume_kw("var");

  t_ = peek(0);
  incr_token_index();
  var_name_ = Token_get_val(t_);

  consume_sym_semicolon(); # ;

  return mklist2(
    Node_new_str("var"),
    Node_new_str(var_name_)
  );
end

def _parse_var_init()
  var g_ = get_g_main();
  var t_;
  var var_name_;
  var expr_node_;
  check_heap_stack_overlap();

  consume_kw("var");

  t_ = peek(0);
  incr_token_index();
  var_name_ = Token_get_val(t_);

  consume_sym_equal(); # =

  expr_node_ = parse_expr(g_);

  consume_sym_semicolon(); # ;

  return mklist3(
    Node_new_str("var"),
    Node_new_str(var_name_),
    expr_node_
  );
end

def _parse_var_array()
  var t_;
  var width;
  var var_name_;

  consume_kw("var");

  consume_sym_one_char(91); # [

  t_ = peek(0);
  incr_token_index();
  width = parse_int(Token_get_val(t_));

  consume_sym_one_char(93); # ]

  var_name_ = Token_get_val(peek(0));
  incr_token_index();

  consume_sym_semicolon();

  return mklist3(
    Node_new_str("var_array"),
    Node_new_str(var_name_),
    Node_new_int(width)
  );
end

def parse_var()
  var [2]s_semicolon;
  var [2]s_equal;
  var t_;

  aset(&s_semicolon, 0, 59); # ;
  aset(&s_semicolon, 1,  0);

  aset(&s_equal, 0, 61); # =
  aset(&s_equal, 1,  0);

  t_ = peek(1);

  if (char_at(Token_get_val(t_), 0) == 91) # [
    _parse_var_array();
  else

    t_ = peek(2);
    case
    when (Token_val_eq(t_, &s_semicolon))
      _parse_var_declare();
    when (Token_val_eq(t_, &s_equal))
      _parse_var_init();
    else
      print_s(Token_get_val(t_));
      panic(426); # parse_var: unexpected token
    end

  end
end

def parse_expr_addr(g_)
  var t_;
  var var_name_;

  consume_sym_one_char(38); # &

  t_ = peek(0);
  incr_token_index();
  var var_name_ = Token_get_val(t_);

  return Node_new_list(
    mklist2(
      Node_new_str("addr"),
      Node_new_str(var_name_)
    )
  );
end

def parse_expr_deref(g_)
  var expr_node_;

  consume_sym_one_char(42); # *
  consume_sym_paren_l();      # (
  expr_node_ = parse_expr(g_);
  consume_sym_paren_r();      # )

  return Node_new_list(
    mklist2(
      Node_new_str("deref"),
      expr_node_
    )
  );
end

def is_binop(t_)
  var s_op_ = Token_get_val(t_);
  var c0 = char_at(s_op_, 0);

  case
  when (c0 == 43) # +
    return true;
  when (c0 == 42) # *
    return true;
  when (c0 == 60) # <
    return true;
  when (c0 == 61) # =
    return char_at(s_op_, 1) == 61; # ==
  when (c0 == 33) # !
    return char_at(s_op_, 1) == 61; # !=
  else
    return false;
  end
end

def _make_str_expr(offset)
  # g_main_ + GO_STRINGS() + offset
  return Node_new_list(
    mklist3(
      Node_new_str("+"),
      Node_new_list(
        mklist3(
          Node_new_str("+"),
          Node_new_str("g_main_"),
          Node_new_list(
            mklist2(
              Node_new_str("funcall"),
              Node_new_str("GO_STRINGS")
            )
          )
        )
      ),
      Node_new_int(offset)
    )
  );
end

def _parse_expr_factor_int(g_)
  var t_;
  var n;

  t_ = peek(0);
  incr_token_index();

  n = parse_int(Token_get_val(t_));
  return Node_new_int(n);
end

def _parse_expr_factor_ident(g_)
  var t_;
  var funcall_;
  var funcall_list_;
  var i;

  if (char_at(Token_get_val(peek(1)), 0) == 40) # (
    funcall_ = parse_funcall(g_);

    funcall_list_ = List_new();
    List_add_str(funcall_list_, "funcall");

    i = 0;
    while (i < List_size(funcall_))
      List_add(funcall_list_, List_get(funcall_, i));
      i = i + 1;
    end

    return Node_new_list(funcall_list_);
  else
    t_ = peek(0);
    incr_token_index();

    return Node_new_str(Token_get_val(t_));
  end
end

def _parse_expr_factor_sym(g_)
  var t_;
  var expr_node_;

  t_ = peek(0);

  case
  when (char_at(Token_get_val(t_), 0) == 40) # (
    consume_sym_paren_l(); # (
    expr_node_ = parse_expr(g_);
    consume_sym_paren_r(); # )

    return expr_node_;

  when (char_at(Token_get_val(t_), 0) == 38) # &
    return parse_expr_addr(g_);

  when (char_at(Token_get_val(t_), 0) == 42) # *
    return parse_expr_deref(g_);

  else
    panic(662); # unexpected symbol
  end
end

def _parse_expr_factor_kw(g_)
  var t_;
  var expr_node_;

  t_ = peek(0);

  if (
    __or(
      str_eq(Token_get_val(t_), "true"),
      str_eq(Token_get_val(t_), "false")
    )
  )
    expr_node_ = Node_new_str(Token_get_val(t_));
    incr_token_index();
    return expr_node_;
  else
    panic(563); # unexpected token
  end
end

def _parse_expr_factor_str(g_)
  var t_;
  var str_offset;
  var expr_list_;

  t_ = peek(0);
  incr_token_index();

  var str_ = Token_get_val(t_);

  var i = StrLitList_index(str_);

  if (__le(0, i))
    str_offset = StrLitList_get_offset(i);
  else
    str_offset = StrLitList_get_new_offset();
    StrLitList_add(str_, str_offset);
  end

  return _make_str_expr(str_offset);
end

def _parse_expr_factor(g_)
  var t_;
  var tkind;

  t_ = peek(0);
  tkind = Token_get_kind(t_);

  case
  when (tkind == TOKEN_KIND__INT())
    return _parse_expr_factor_int(g_);
  when (tkind == TOKEN_KIND__IDENT())
    return _parse_expr_factor_ident(g_);
  when (tkind == TOKEN_KIND__SYM())
    return _parse_expr_factor_sym(g_);
  when (tkind == TOKEN_KIND__KW())
    return _parse_expr_factor_kw(g_);
  when (tkind == TOKEN_KIND__STR())
    return _parse_expr_factor_str(g_);
  else
    Json_print(Token_to_plain(t_));
    panic(645); # not yet impl
  end
end

def parse_expr(g_)
  var expr_node_;
  var factor_node_;
  var s_op_;

  expr_node_ = _parse_expr_factor(g_);

  while (is_binop(peek(0)))
    s_op_ = Token_get_val(peek(0));
    incr_token_index();

    factor_node_ = _parse_expr_factor(g_);

    expr_node_ =
      Node_new_list(
        mklist3(
          Node_new_str(s_op_),
          expr_node_,
          factor_node_
        )
      );
  end

  return expr_node_;
end

def parse_set(g_)
  var t_;
  var lhs_node_;
  var expr_node_;

  t_ = peek(0);

  if (char_at(Token_get_val(t_), 0) == 42) # *
    lhs_node_ = parse_expr_deref(g_);
  else
    incr_token_index();
    lhs_node_ = Node_new_str(Token_get_val(t_));
  end

  consume_sym_equal(); # =

  expr_node_ = parse_expr(g_);

  consume_sym_semicolon(); # ;

  return mklist3(
    Node_new_str("set"),
    lhs_node_,
    expr_node_
  );
end

def parse_funcall(g_)
  var t_;
  var fn_name_;
  var funcall_;
  var args_;

  t_ = peek(0);
  incr_token_index();
  fn_name_ = Token_get_val(t_);

  consume_sym_paren_l(); # (
  args_ = parse_exprs();
  consume_sym_paren_r(); # )

  funcall_ = List_new();
  List_add_str(funcall_, fn_name_);

  List_add_all(funcall_, args_);

  return funcall_;
end

def parse_call(g_)
  var stmt_;
  var funcall_;

  stmt_ = List_new();

  List_add_str(stmt_, "call");

  funcall_ = parse_funcall(g_);
  List_add_all(stmt_, funcall_);

  consume_sym_semicolon(); # ;

  return stmt_;
end

def parse_return(g_)
  var expr_;
  var stmt_;

  consume_kw("return");

  stmt_ = List_new();
  List_add_str(stmt_, "return");

  if (str_eq(Token_get_val(peek(0)), ";"))
    consume_sym_semicolon(); # ;
  else
    expr_ = parse_expr(g_);
    List_add(stmt_, expr_);

    consume_sym_semicolon(); # ;
  end

  return stmt_;
end

def parse_while(g_)
  var expr_node_;
  var stmts_;

  consume_kw("while");

  consume_sym_paren_l(); # (
  expr_node_ = parse_expr(g_);
  consume_sym_paren_r(); # )

  stmts_ = parse_stmts(g_);

  consume_kw("end");

  return mklist3(
    Node_new_str("while"),
    expr_node_,
    Node_new_list(stmts_)
  );
end

def parse_break(g_)
  var stmt_;

  consume_kw("break");
  consume_sym_semicolon(); # ;

  stmt_ = List_new();
  List_add_str(stmt_, "break");

  return stmt_;
end

def _parse_when_clause(g_)
  var when_clause_;
  var cond_expr_node_;
  var stmts_;
  var t_;

  t_ = peek(0);

  case
  when (str_eq(Token_get_val(t_), "when"))
    consume_kw("when");

    consume_sym_paren_l(); # (
    cond_expr_node_ = parse_expr(g_);
    consume_sym_paren_r(); # )
  when (str_eq(Token_get_val(t_), "else"))
    consume_kw("else");
    cond_expr_node_ = Node_new_int(1);
  else
    panic(748); # _parse_when_clause
  end

  stmts_ = parse_stmts(g_);

  when_clause_ = List_new();
  List_add(when_clause_, cond_expr_node_);
  List_add_all(when_clause_, stmts_);

  return when_clause_;
end

def parse_case(g_)
  var stmt_;
  var when_clause_;

  consume_kw("case");

  stmt_ = List_new();
  List_add_str(stmt_, "case");

  while (__not(Token_val_eq(peek(0), "end")))
    when_clause_ = _parse_when_clause(g_);
    List_add_list(stmt_, when_clause_);
  end

  consume_kw("end");

  return stmt_;
end

def parse_vm_comment(g_)
  var t_;
  var stmt_;

  stmt_ = List_new();

  consume_kw("_cmt");
  consume_sym_paren_l(); # (

  t_ = peek(0);
  incr_token_index();

  List_add_str(stmt_, "_cmt");
  List_add_str(stmt_, Token_get_val(t_));

  consume_sym_paren_r(); # )
  consume_sym_semicolon(); # ;

  return stmt_;
end

def parse_stmt(g_)
  var t_ = peek(0);
  var val_ = Token_get_val(t_);

  case
  when (str_eq(val_, "_cmt"))
    return parse_vm_comment(g_);
  when (str_eq(val_, "return"))
    return parse_return(g_);
  when (str_eq(val_, "while"))
    return parse_while(g_);
  when (str_eq(val_, "break"))
    return parse_break(g_);
  when (str_eq(val_, "case"))
    return parse_case(g_);
  else
    case
    when (
      __and(
        Token_get_kind(peek(0)) == TOKEN_KIND__IDENT(),
        char_at(Token_get_val(peek(1)), 0) == 40 # (
      )
    )
      return parse_call(g_);
    else
      return parse_set(g_);
    end
  end
end

def parse_stmts(g_)
  var stmt_;
  var stmts_;
  var t_;

  stmts_ = List_new();

  while (true)
    t_ = peek(0);

    case
    when (str_eq(Token_get_val(t_), "when"))
      break;
    when (str_eq(Token_get_val(t_), "else"))
      break;
    when (str_eq(Token_get_val(t_), "end"))
      break;
    end

    stmt_ = parse_stmt(g_);
    List_add_list(stmts_, stmt_);
  end

  return stmts_;
end

def parse_func(g_)
  var func_stmt_;
  var t_;
  var stmts_;
  var stmt_;
  var args_;
  var fn_name_;
  check_heap_stack_overlap();

  consume_kw("def");

  t_ = peek(0);
  incr_token_index();
  fn_name_ = Token_get_val(t_);

  consume_sym_paren_l(); # (

  args_ = parse_args();

  consume_sym_paren_r(); # )

  stmts_ = List_new();

  while (true)
    t_ = peek(0);
    if (Token_val_eq(t_, "end"))
      break;
    end

    if (str_eq(Token_get_val(t_), "var"))
      stmt_ = parse_var();
    else
      stmt_ = parse_stmt(g_);
    end
    List_add_list(stmts_, stmt_);
  end

  consume_kw("end");

  func_stmt_ = List_new();
  List_add_str(func_stmt_, "func");
  List_add_str(func_stmt_, fn_name_);
  List_add_list(func_stmt_, args_);
  List_add_list(func_stmt_, stmts_);

  return func_stmt_;
end

def parse_global(g_)
  var name_;

  consume_kw("global");

  name_ = Token_get_val(peek(0));
  incr_token_index();

  consume_sym_semicolon();

  return mklist2(
    Node_new_str("gvar"),
    Node_new_str(name_)
  );
end

def parse_top_stmt(g_)
  var t_ = peek(0);

  case
  when (str_eq(Token_get_val(t_), "def"))
    return parse_func(g_);
  when (str_eq(Token_get_val(t_), "global"))
    return parse_global(g_);
  else
    panic(770); # parse_top_stmt
  end
end

def parse_top_stmts(g_)
  var top_stmts_;
  var top_stmt_;

  top_stmts_ = List_new();
  List_add_str(top_stmts_, "top_stmts");

  while (__not(is_end()))
    top_stmt_ = parse_top_stmt(g_);
    List_add_list(top_stmts_, top_stmt_);
  end

  return top_stmts_;
end

def parse(g_)
  return parse_top_stmts(g_);
end

def make_set_byte_stmt(bi, byte)
  # *(offset_ + bi) = byte
  return mklist3(
    Node_new_str("set"),
    Node_new_list(
      mklist2(
        Node_new_str("deref"),
        Node_new_list(
          mklist3(
            Node_new_str("+"),
            Node_new_str("offset_"),
            Node_new_int(bi)
          )
        )
      )
    ),
    Node_new_int(byte)
  );
end

def make_init_strings_fn(g_)
  var fn_ = List_new();
  var args_ = List_new();
  var stmts_ = List_new();

  # ----
  # var offset_ = g_main_ + GO_STRINGS();
  var var_offset_ =
    mklist3(
      Node_new_str("var"),
      Node_new_str("offset_"),
      Node_new_list(
        mklist3(
          Node_new_str("+"),
          Node_new_str("g_main_"),
          Node_new_list(
            mklist2(
              Node_new_str("funcall"),
              Node_new_str("GO_STRINGS")
            )
          )
        )
      )
    );

  List_add_list(stmts_, var_offset_);

  # ----

  var i = 0;
  var bi = 0;
  var str_bi;
  var str_;
  var byte;
  var str_lit_list_ = StrLitList_get_self();
  while (i < List_size(str_lit_list_))
    str_ = StrLitList_get_str(i);
    str_bi = 0;
    while (str_bi < str_size(str_))
      byte = char_at(str_, str_bi);
      List_add_list(stmts_, make_set_byte_stmt(bi, byte));
      bi = bi + 1;
      str_bi = str_bi + 1;
    end
    List_add_list(stmts_, make_set_byte_stmt(bi, 0));
    bi = bi + 1;
    i = i + 1;
  end

  # ----

  List_add_str(fn_, "func");
  List_add_str(fn_, "init_strings");
  List_add_list(fn_, args_);
  List_add_list(fn_, stmts_);

  return fn_;
end

def _main(g_)
  StrLitList_init();
  set_token_index(0);

  read_tokens(g_);

  var ast_ = parse(g_);

  var fn_init_strings_;
  if (0 < List_size(StrLitList_get_self()))
    fn_init_strings_ = make_init_strings_fn(g_);
    List_add_list(ast_, fn_init_strings_);
  end

  Json_print(ast_);
end

def main()
  var [16005]g;
  var g_ = &g;

  init_globals(g_);
  init_strings();

  _main(g_);
end
