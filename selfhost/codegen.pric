# -*- mode: ruby -*-

#include lib/std.pric
#include lib/words.pric
#include lib/types.pric
#include lib/json.pric

# --------------------------------

def str_lit__cmt(g_)
  return "_cmt";
end

def str_lit_bp(g_)
  return "bp";
end

def str_lit_call(g_)
  return "call";
end

def str_lit_deref(g_)
  return "deref";
end

def str_lit_set(g_)
  return "set";
end

def str_lit_sp(g_)
  return "sp";
end

def str_lit_while(g_)
  return "while";
end

# --------------------------------

def asm_indent()
  putchar(C_SPC());
  putchar(C_SPC());
end

def asm_exit(exit_status)
  var [5]s_temp;

  aset(&s_temp, 0, 101); # e
  aset(&s_temp, 1, 120); # x
  aset(&s_temp, 2, 105); # i
  aset(&s_temp, 3, 116); # t
  aset(&s_temp, 4,   0);

  asm_indent();
  print_s(&s_temp);
  putchar(C_SPC()); print_i(exit_status);
  putchar(C_LF());
end

def asm_label(label_)
  var [6]s_temp;

  aset(&s_temp, 0, 108); # l
  aset(&s_temp, 1,  97); # a
  aset(&s_temp, 2,  98); # b
  aset(&s_temp, 3, 101); # e
  aset(&s_temp, 4, 108); # l
  aset(&s_temp, 5,   0);

  print_s(&s_temp);
  putchar(C_SPC()); print_s(label_);
  putchar(C_LF());
end

def asm_call(g_, label_)
  asm_indent();
  print_s(str_lit_call(g_));
  putchar(C_SPC()); print_s(label_);
  putchar(C_LF());
end

def asm_ret()
  var [4]s_temp;

  aset(&s_temp, 0, 114); # r
  aset(&s_temp, 1, 101); # e
  aset(&s_temp, 2, 116); # t
  aset(&s_temp, 3,   0);

  asm_indent();
  print_s(&s_temp);
  putchar(C_LF());
end

def asm_cp(src_, dest_)
  var [3]s_temp;

  aset(&s_temp, 0,  99); # c
  aset(&s_temp, 1, 112); # p
  aset(&s_temp, 2,   0);

  asm_indent();
  print_s(&s_temp);
  putchar(C_SPC()); print_s(src_);
  putchar(C_SPC()); print_s(dest_);
  putchar(C_LF());
end

def asm_push(arg_)
  var [5]s_temp;

  aset(&s_temp, 0, 112); # p
  aset(&s_temp, 1, 117); # u
  aset(&s_temp, 2, 115); # s
  aset(&s_temp, 3, 104); # h
  aset(&s_temp, 4,   0);

  asm_indent();
  print_s(&s_temp);
  putchar(C_SPC()); print_s(arg_);
  putchar(C_LF());
end

def asm_pop(dest_)
  var [4]s_temp;

  aset(&s_temp, 0, 112); # p
  aset(&s_temp, 1, 111); # o
  aset(&s_temp, 2, 112); # p
  aset(&s_temp, 3,   0);

  asm_indent();
  print_s(&s_temp);
  putchar(C_SPC()); print_s(dest_);
  putchar(C_LF());
end

def asm_sub_sp(n)
  var [7]s_temp;

  aset(&s_temp, 0, 115); # s
  aset(&s_temp, 1, 117); # u
  aset(&s_temp, 2,  98); # b
  aset(&s_temp, 3,  95); # _
  aset(&s_temp, 4, 115); # s
  aset(&s_temp, 5, 112); # p
  aset(&s_temp, 6,   0);

  asm_indent();
  print_s(&s_temp);
  putchar(C_SPC()); print_i(n);
  putchar(C_LF());
end

def asm_add_sp(n)
  var [7]s_temp;

  aset(&s_temp, 0,  97); # a
  aset(&s_temp, 1, 100); # d
  aset(&s_temp, 2, 100); # d
  aset(&s_temp, 3,  95); # _
  aset(&s_temp, 4, 115); # s
  aset(&s_temp, 5, 112); # p
  aset(&s_temp, 6,   0);

  asm_indent();
  print_s(&s_temp);
  putchar(C_SPC()); print_i(n);
  putchar(C_LF());
end

def asm_compare()
  asm_indent();
  putchar( 99); # c
  putchar(111); # o
  putchar(109); # m
  putchar(112); # p
  putchar( 97); # a
  putchar(114); # r
  putchar(101); # e
  putchar(C_LF());
end

def asm_jump(label_)
  asm_indent();
  putchar(106); # j
  putchar(117); # u
  putchar(109); # m
  putchar(112); # p

  putchar(C_SPC()); print_s(label_);
  putchar(C_LF());
end

def asm_jump_eq(label_)
  asm_indent();
  putchar(106); # j
  putchar(117); # u
  putchar(109); # m
  putchar(112); # p
  putchar( 95); # _
  putchar(101); # e
  putchar(113); # q

  putchar(C_SPC()); print_s(label_);
  putchar(C_LF());
end

def asm_jump_g(label_)
  asm_indent();
  putchar(106); # j
  putchar(117); # u
  putchar(109); # m
  putchar(112); # p
  putchar( 95); # _
  putchar(103); # g

  putchar(C_SPC()); print_s(label_);
  putchar(C_LF());
end

def asm_vm_comment(g_, vm_comment_)
  var vm_comment_size = 40; var [40]vm_comment;
  var i;
  var c;

  str_cp_with_check(
    &vm_comment, vm_comment_,
    vm_comment_size
  );

  i = 0;
  while (i < str_size(&vm_comment))
    c = char_at(&vm_comment, i);
    if (c == C_SPC())
      c = 126; # ~
      aset(&vm_comment, i, c);
    end
    i = i + 1;
  end

  asm_indent();
  print_s(str_lit__cmt(g_));
  putchar(C_SPC()); print_s(&vm_comment);
  putchar(C_LF());
end

def asm_get_vram(vram_addr_, dest_)
  var [9]s_temp;

  aset(&s_temp, 0, 103); # g
  aset(&s_temp, 1, 101); # e
  aset(&s_temp, 2, 116); # t
  aset(&s_temp, 3,  95); # _
  aset(&s_temp, 4, 118); # v
  aset(&s_temp, 5, 114); # r
  aset(&s_temp, 6,  97); # a
  aset(&s_temp, 7, 109); # m
  aset(&s_temp, 8,   0);

  asm_indent();
  print_s(&s_temp);
  putchar(C_SPC()); print_s(vram_addr_);
  putchar(C_SPC()); print_s(dest_);
  putchar(C_LF());
end

def asm_set_vram(vram_addr_, val_)
  var [9]s_temp;

  aset(&s_temp, 0, 115); # s
  aset(&s_temp, 1, 101); # e
  aset(&s_temp, 2, 116); # t
  aset(&s_temp, 3,  95); # _
  aset(&s_temp, 4, 118); # v
  aset(&s_temp, 5, 114); # r
  aset(&s_temp, 6,  97); # a
  aset(&s_temp, 7, 109); # m
  aset(&s_temp, 8,   0);

  asm_indent();
  print_s(&s_temp);
  putchar(C_SPC()); print_s(vram_addr_);
  putchar(C_SPC()); print_s(val_);
  putchar(C_LF());
end

def asm_lea(dest_, src_)
  asm_indent();

  putchar(108); # l
  putchar(101); # e
  putchar( 97); # a

  putchar(C_SPC()); print_s(dest_);
  putchar(C_SPC()); print_s(src_);
  putchar(C_LF());
end

def asm_write(c, fd)
  var [8]s_c;

  unparse_int(&s_c, c);

  asm_indent();
  putchar(119); # w
  putchar(114); # r
  putchar(105); # i
  putchar(116); # t
  putchar(101); # e

  putchar(C_SPC()); print_s(&s_c);
  putchar(C_SPC()); print_i(fd);

  putchar(C_LF());
end

def asm_fn_prologue(g_)
  asm_push(str_lit_bp(g_));
  asm_cp(str_lit_sp(g_), str_lit_bp(g_));
end

def asm_fn_epilogue(g_)
  asm_cp(str_lit_bp(g_), str_lit_sp(g_));
  asm_pop(str_lit_bp(g_));
end

# --------------------------------

def render_indirection_bp(dest_, disp, dest_size)
  var [8]s_disp;

  unparse_int(&s_disp, disp);

  aset(dest_, 0,  91); # [
  aset(dest_, 1,  98); # b
  aset(dest_, 2, 112); # p
  aset(dest_, 3,  58); # :
  aset(dest_, 4,   0);

  append_str_with_check(dest_, &s_disp, dest_size);
  append_char_with_check(dest_, 93, dest_size); # ]
end

def to_fn_arg_addr(dest_, names_, name_, dest_size)
  var idx = Names_index(names_, name_);

  render_indirection_bp(dest_, idx + 2, dest_size);
end

def to_lvar_addr(dest_, names_, name_, dest_size)
  var disp = Names_disp_lvar(names_, name_);

  render_indirection_bp(dest_, disp, dest_size);
end

def append_label_id(label_, id, dest_size)
  var [8]id_str;

  append_char_with_check(label_, 95, dest_size); # _

  unparse_int(&id_str, id);
  append_str_with_check(label_, &id_str, dest_size);
end

# --------------------------------

def WhileStack_init(g_)
  *(g_ + GO_WHILE_CURSOR()) = 0;
end

def WhileStack_push(g_, label_id)
  var cur = *(g_ + GO_WHILE_CURSOR());

  *(g_ + GO_WHILE_STACK() + cur) = label_id;

  if (__le(GS_WHILE_STACK(), cur + 1))
    panic(359); # out of range
  else
    *(g_ + GO_WHILE_CURSOR()) = cur + 1;
  end
end

def WhileStack_pop(g_)
  var cur = *(g_ + GO_WHILE_CURSOR());

  if (0 < cur)
    *(g_ + GO_WHILE_CURSOR()) = cur + -1;
  else
    panic(371); # out of range
  end
end

def WhileStack_top(g_)
  var cur = *(g_ + GO_WHILE_CURSOR()) + -1;
  return *(g_ + GO_WHILE_STACK() + cur);
end

# --------------------------------

def _gen_expr_addr(g_, fn_arg_names_, lvar_names_, expr_)
  var [6]s_reg_a; str_set_reg_a(&s_reg_a);
  var list_ = Node_get_list(expr_);
  var arg_ = List_get_as_str(list_, 1);
  var disp;
  var s_src_size = 15; var [15]s_src; # [bp:-xxxxxxxx]
  var [8]s_disp;

  if (Names_includes(lvar_names_, arg_))
    disp = Names_disp_lvar(lvar_names_, arg_);
    unparse_int(&s_disp, disp);

    aset(&s_src, 0,  91); # [
    aset(&s_src, 1,  98); # b
    aset(&s_src, 2, 112); # p
    aset(&s_src, 3,  58); # :
    aset(&s_src, 4,   0);

    append_str_with_check(&s_src, &s_disp, s_src_size);

    append_char_with_check(&s_src, 93, s_src_size); # ]

    asm_lea(&s_reg_a, &s_src);
  else
    panic(526); # _gen_expr_addr
  end
end

def _gen_expr_deref(g_, fn_arg_names_, lvar_names_, expr_)
  var list_ = Node_get_list(expr_);
  var inner_expr_ = List_get(list_, 1);

  var [6]s_reg_a; str_set_reg_a(&s_reg_a);
  var s_reg_a_ind_size = 8; var [8]s_reg_a_ind; # [reg_a]

  aset(&s_reg_a_ind, 0, 0);
  append_char_with_check(&s_reg_a_ind, 91, s_reg_a_ind_size); # [
  append_str_with_check(&s_reg_a_ind, &s_reg_a, s_reg_a_ind_size);
  append_char_with_check(&s_reg_a_ind, 93, s_reg_a_ind_size); # ]

  gen_expr(g_, fn_arg_names_, lvar_names_, inner_expr_);

  asm_cp(&s_reg_a_ind, &s_reg_a);
end

def _gen_expr_add()
  var [6]s_reg_a; str_set_reg_a(&s_reg_a);
  var [6]s_reg_b; str_set_reg_b(&s_reg_b);

  asm_pop(&s_reg_b);
  asm_pop(&s_reg_a);

  asm_indent();
  putchar( 97); # a
  putchar(100); # d
  putchar(100); # d
  putchar( 95); # _
  putchar( 97); # a
  putchar( 98); # b
  putchar(C_LF());
end

def _gen_expr_mult()
  var [6]s_reg_a; str_set_reg_a(&s_reg_a);
  var [6]s_reg_b; str_set_reg_b(&s_reg_b);

  asm_pop(&s_reg_b);
  asm_pop(&s_reg_a);

  asm_indent();
  putchar(109); # m
  putchar(117); # u
  putchar(108); # l
  putchar(116); # t
  putchar( 95); # _
  putchar( 97); # a
  putchar( 98); # b
  putchar(C_LF());
end

def _gen_expr_eq(g_)
  var [6]s_reg_a; str_set_reg_a(&s_reg_a);
  var [6]s_reg_b; str_set_reg_b(&s_reg_b);
  var [2]s_0;
  var [2]s_1;
  var label_end_size = 12; var [12]label_end; # end_eq_xxxx ... 11 chars + 1
  var label_then_size = 10; var [10]label_then; # then_xxxx ... 9 chars + 1
  var label_id;

  aset(&s_0, 0, 48); # 0
  aset(&s_0, 1,  0);

  aset(&s_1, 0, 49); # 1
  aset(&s_1, 1,  0);

  inc_label_id(g_);
  label_id = get_label_id(g_);

  aset(&label_end, 0, 101); # e
  aset(&label_end, 1, 110); # n
  aset(&label_end, 2, 100); # d
  aset(&label_end, 3,  95); # _
  aset(&label_end, 4, 101); # e
  aset(&label_end, 5, 113); # q
  aset(&label_end, 6,   0);
  append_label_id(&label_end, label_id, label_end_size);

  aset(&label_then, 0, 116); # t
  aset(&label_then, 1, 104); # h
  aset(&label_then, 2, 101); # e
  aset(&label_then, 3, 110); # n
  aset(&label_then, 4,   0);
  append_label_id(&label_then, label_id, label_then_size);

  asm_pop(&s_reg_b);
  asm_pop(&s_reg_a);

  asm_compare();
  asm_jump_eq(&label_then);

  asm_cp(&s_0, &s_reg_a);
  asm_jump(&label_end);

  asm_label(&label_then);
  asm_cp(&s_1, &s_reg_a);

  asm_label(&label_end);
end

def _gen_expr_neq(g_)
  var [6]s_reg_a; str_set_reg_a(&s_reg_a);
  var [6]s_reg_b; str_set_reg_b(&s_reg_b);
  var [2]s_0;
  var [2]s_1;
  var label_end_size = 13; var [13]label_end; # end_neq_xxxx ... 12 chars + 1
  var label_then_size = 10; var [10]label_then; # then_xxxx ... 9 chars + 1
  var label_id;

  aset(&s_0, 0, 48); # 0
  aset(&s_0, 1,  0);

  aset(&s_1, 0, 49); # 1
  aset(&s_1, 1,  0);

  inc_label_id(g_);
  label_id = get_label_id(g_);

  aset(&label_end, 0, 101); # e
  aset(&label_end, 1, 110); # n
  aset(&label_end, 2, 100); # d
  aset(&label_end, 3,  95); # _
  aset(&label_end, 4, 110); # n
  aset(&label_end, 5, 101); # e
  aset(&label_end, 6, 113); # q
  aset(&label_end, 7,   0);
  append_label_id(&label_end, label_id, label_end_size);

  aset(&label_then, 0, 116); # t
  aset(&label_then, 1, 104); # h
  aset(&label_then, 2, 101); # e
  aset(&label_then, 3, 110); # n
  aset(&label_then, 4,   0);
  append_label_id(&label_then, label_id, label_then_size);

  asm_pop(&s_reg_b);
  asm_pop(&s_reg_a);

  asm_compare();
  asm_jump_eq(&label_then);

  asm_cp(&s_1, &s_reg_a);
  asm_jump(&label_end);

  asm_label(&label_then);
  asm_cp(&s_0, &s_reg_a);

  asm_label(&label_end);
end

def _gen_expr_lt(g_)
  var [6]s_reg_a; str_set_reg_a(&s_reg_a);
  var [6]s_reg_b; str_set_reg_b(&s_reg_b);
  var [2]s_0;
  var [2]s_1;
  var label_end_size = 12; var [12]label_end; # end_lt_xxxx ... 11 chars + 1
  var label_then_size = 10; var [10]label_then; # then_xxxx ... 9 chars + 1
  var label_id;

  aset(&s_0, 0, 48); # 0
  aset(&s_0, 1,  0);

  aset(&s_1, 0, 49); # 1
  aset(&s_1, 1,  0);

  inc_label_id(g_);
  label_id = get_label_id(g_);

  aset(&label_end, 0, 101); # e
  aset(&label_end, 1, 110); # n
  aset(&label_end, 2, 100); # d
  aset(&label_end, 3,  95); # _
  aset(&label_end, 4, 108); # l
  aset(&label_end, 5, 116); # t
  aset(&label_end, 6,   0);
  append_label_id(&label_end, label_id, label_end_size);

  aset(&label_then, 0, 116); # t
  aset(&label_then, 1, 104); # h
  aset(&label_then, 2, 101); # e
  aset(&label_then, 3, 110); # n
  aset(&label_then, 4,   0);
  append_label_id(&label_then, label_id, label_then_size);

  asm_pop(&s_reg_b);
  asm_pop(&s_reg_a);

  asm_compare();
  asm_jump_g(&label_then);

  asm_cp(&s_0, &s_reg_a);
  asm_jump(&label_end);

  asm_label(&label_then);
  asm_cp(&s_1, &s_reg_a);

  asm_label(&label_end);
end

def _gen_expr_unary(g_, fn_arg_names_, lvar_names_, expr_)
  var list_;
  var operator_;

  list_ = Node_get_list(expr_);
  operator_ = List_get_as_str(list_, 0);

  case
  when (str_eq(operator_, "addr"))
    return _gen_expr_addr(g_, fn_arg_names_, lvar_names_, expr_);
  when (str_eq(operator_, str_lit_deref(g_)))
    return _gen_expr_deref(g_, fn_arg_names_, lvar_names_, expr_);
  else
    p_s(operator_);
    panic(670); # _gen_expr_unary
  end
end

def _gen_expr_binary(g_, fn_arg_names_, lvar_names_, expr_)
  var expr_els_ = Node_get_list(expr_);
  var op_str_ = List_get_as_str(expr_els_, 0);
  var arg_l_ = List_get(expr_els_, 1);
  var arg_r_ = List_get(expr_els_, 2);
  var [6]s_reg_a; str_set_reg_a(&s_reg_a);
  var [3]s_eq;
  var [3]s_neq;

  aset(&s_eq, 0, 61); # =
  aset(&s_eq, 1, 61); # =
  aset(&s_eq, 2,  0);

  aset(&s_neq, 0, 33); # !
  aset(&s_neq, 1, 61); # =
  aset(&s_neq, 2,  0);

  gen_expr(g_, fn_arg_names_, lvar_names_, arg_l_);
  asm_push(&s_reg_a);

  gen_expr(g_, fn_arg_names_, lvar_names_, arg_r_);
  asm_push(&s_reg_a);

  case
  when (char_at(op_str_, 0) == 43) # +
    _gen_expr_add();
  when (char_at(op_str_, 0) == 42) # *
    _gen_expr_mult();
  when (str_eq(op_str_, &s_eq)) # ==
    _gen_expr_eq(g_);
  when (str_eq(op_str_, &s_neq)) # neq
    _gen_expr_neq(g_);
  when (char_at(op_str_, 0) == 60) # <
    _gen_expr_lt(g_);
  else
    panic(284); # _gen_expr_binary: not yet impl
  end
end

def gen_expr(g_, fn_arg_names_, lvar_names_, expr_)
  var cp_src_size = 20; var [20]cp_src;
  var [6]s_reg_a; str_set_reg_a(&s_reg_a);
  var expr;
  var str_;
  var list_;

  case
  when (Node_kind_eq(expr_, NODE_KIND__INT()))
    expr = Node_get_int(expr_);
    unparse_int(&cp_src, expr);
    asm_cp(&cp_src, &s_reg_a);

  when (Node_kind_eq(expr_, NODE_KIND__STR()))
    str_ = Node_get_str(expr_);

    case
    when (str_eq(str_, "true"))
      aset(&cp_src, 0, 49); # 1
      aset(&cp_src, 1,  0);
      asm_cp(&cp_src, &s_reg_a);

    when (str_eq(str_, "false"))
      aset(&cp_src, 0, 48); # 0
      aset(&cp_src, 1,  0);
      asm_cp(&cp_src, &s_reg_a);

    when (Names_includes(fn_arg_names_, str_))
      to_fn_arg_addr(&cp_src, fn_arg_names_, str_, cp_src_size);
      asm_cp(&cp_src, &s_reg_a);

    when (Names_includes(lvar_names_, str_))
      to_lvar_addr(&cp_src, lvar_names_, str_, cp_src_size);
      asm_cp(&cp_src, &s_reg_a);

    else
      Json_print(Names_to_plain(g_, fn_arg_names_));
      Json_print(Names_to_plain(g_, lvar_names_));
      Json_print_node(expr_);
      panic(681); # gen_expr: no such function argument or local variable
    end

  when (Node_kind_eq(expr_, NODE_KIND__LIST()))
    list_ = Node_get_list(expr_);

    if (str_eq(
          List_get_as_str(list_, 0),
          "funcall"
        ))
      gen_call(g_, fn_arg_names_, lvar_names_, list_);
    else
      case
      when (List_size(list_) == 2)
        _gen_expr_unary(g_, fn_arg_names_, lvar_names_, expr_);
      when (List_size(list_) == 3)
        _gen_expr_binary(g_, fn_arg_names_, lvar_names_, expr_);
      else
        panic(742); # gen_expr
      end
    end

  else
    Json_print_node(expr_);
    panic(344); # gen_expr: not yet implemented
  end
end

def gen_call(g_, fn_arg_names_, lvar_names_, stmt_)
  var vm_comment_size = 32; var [32]vm_comment;
  var fn_name_;
  var args_;
  var i;
  var node_;
  var [6]s_reg_a; str_set_reg_a(&s_reg_a);

  fn_name_ = List_get_as_str(stmt_, 1);
  args_ = List_rest(g_, stmt_, 2);

  str_cp_with_check(&vm_comment, str_lit_call(g_), vm_comment_size);
  aset(&vm_comment, 4, C_SPC());
  aset(&vm_comment, 5, C_SPC());
  aset(&vm_comment, 6, 0);
  append_str_with_check(
    &vm_comment, fn_name_,
    vm_comment_size
  );

  i = __sub(List_size(args_), 1);
  while (__le(0, i))
    node_ = List_get(args_, i);
    gen_expr(g_, fn_arg_names_, lvar_names_, node_);
    asm_push(&s_reg_a);
    i = __sub(i, 1);
  end

  asm_vm_comment(g_, &vm_comment);
  asm_call(g_, fn_name_);

  if (0 < List_size(args_))
    asm_add_sp(List_size(args_));
  end
end

def gen_set(g_, fn_arg_names_, lvar_names_, stmt_)
  var dest_size = 15; var [15]dest; # [bp:-xxxxxxxx] 14 chars + 1
  var dest_node_;
  var [8]dest_str_;
  var [6]s_reg_a; str_set_reg_a(&s_reg_a);
  var [6]s_reg_b; str_set_reg_b(&s_reg_b);
  var expr_node_;
  var list_;
  var s_reg_a_ind_size = 8; var [8]s_reg_a_ind; # [reg_a]

  # "[reg_a]"
  aset(&s_reg_a_ind, 0, 0);
  append_char_with_check(&s_reg_a_ind, 91, s_reg_a_ind_size); # [
  append_str_with_check(&s_reg_a_ind, &s_reg_a, s_reg_a_ind_size);
  append_char_with_check(&s_reg_a_ind, 93, s_reg_a_ind_size); # ]

  dest_node_ = List_get(stmt_, 1);
  expr_node_ = List_get(stmt_, 2);

  gen_expr(g_, fn_arg_names_, lvar_names_, expr_node_);

  case
  when (Node_get_kind(dest_node_) == NODE_KIND__STR())
    dest_str_ = Node_get_str(dest_node_);

    case
    when (Names_includes(lvar_names_, dest_str_))
      to_lvar_addr(&dest, lvar_names_, dest_str_, dest_size);
      asm_cp(&s_reg_a, &dest);
    else
      Json_print(stmt_);
      p_s(&dest);
      panic(823); # gen_set
    end

  when (Node_get_kind(dest_node_) == NODE_KIND__LIST())
    list_ = Node_get_list(dest_node_);

    if (str_eq(List_get_as_str(list_, 0), str_lit_deref(g_)))
      asm_push(&s_reg_a);

      gen_expr(g_, fn_arg_names_, lvar_names_, List_get(list_, 1));

      asm_pop(&s_reg_b);
      asm_cp(&s_reg_b, &s_reg_a_ind);
    else
      panic(859); # gen_set
    end

  else
    panic(853); # gen_set
  end
end

def gen_return(g_, fn_arg_names_, lvar_names_, stmt_)
  var expr_ = List_get(stmt_, 1);

  if (List_size(stmt_) == 2)
    gen_expr(g_, fn_arg_names_, lvar_names_, expr_);
  end

  asm_fn_epilogue(g_);
  asm_ret();
end

def gen_while(g_, fn_arg_names_, lvar_names_, stmt_)
  var [6]s_reg_b; str_set_reg_b(&s_reg_b);

  var [2]s_0;

  var label_begin_size = 11; var [11]label_begin; # while_xxxx
  var label_end_size = 15; var [15]label_end; # end_while_xxxx

  var label_id;
  var cond_expr_node_ = List_get(stmt_, 1);
  var stmts_ = List_get_as_list(stmt_, 2);

  aset(&s_0, 0, 48); # 0
  aset(&s_0, 1,  0);

  inc_label_id(g_);
  label_id = get_label_id(g_);
  WhileStack_push(g_, label_id);

  str_cp_with_check(&label_begin, str_lit_while(g_), label_begin_size);
  append_label_id(&label_begin, label_id, label_begin_size);

  aset(&label_end, 0, 101); # e
  aset(&label_end, 1, 110); # n
  aset(&label_end, 2, 100); # d
  aset(&label_end, 3,  95); # _
  aset(&label_end, 4, 119); # w
  aset(&label_end, 5, 104); # h
  aset(&label_end, 6, 105); # i
  aset(&label_end, 7, 108); # l
  aset(&label_end, 8, 101); # e
  aset(&label_end, 9,   0);
  append_label_id(&label_end, label_id, label_end_size);

  asm_label(&label_begin);

  gen_expr(g_, fn_arg_names_, lvar_names_, cond_expr_node_);

  asm_cp(&s_0, &s_reg_b);

  asm_compare();

  asm_jump_eq(&label_end);

  gen_stmts(g_, fn_arg_names_, lvar_names_, stmts_);
  asm_jump(&label_begin);

  asm_label(&label_end);

  WhileStack_pop(g_);
end

def gen_break(g_)
  var label_id = WhileStack_top(g_);

  var label_end_size = 15; var [15]label_end; # end_while_xxxx
  str_cp_with_check(&label_end, "end_while", label_end_size);
  append_label_id(&label_end, label_id, label_end_size);

  asm_jump(&label_end);

  putchar(C_LF());
end

def gen_case(g_, fn_arg_names_, lvar_names_, stmt_)
  var i;
  var when_clauses_;
  var when_clause_;
  var cond_expr_node_;
  var stmts_;
  var label_id;

  var label_size = 19; # end_when_xxxx_xxxx
  var [19]label_end;
  var [19]label_end_when_head;
  var [19]label_temp;

  var s_0_ = "0";
  var s_reg_b_ = "reg_b";
  var when_index = -1;

  inc_label_id(g_);
  label_id = get_label_id(g_);

  str_cp_with_check(&label_end, "end_case", label_size);
  append_label_id(&label_end, label_id, label_size);

  str_cp_with_check(&label_end_when_head, "end_when", label_size);
  append_label_id(&label_end_when_head, label_id, label_size);

  when_clauses_ = List_rest(g_, stmt_, 1);

  i = 0;
  while (i < List_size(when_clauses_))
    when_index = when_index + 1;
    when_clause_ = List_get_as_list(when_clauses_, i);
    cond_expr_node_ = List_get(when_clause_, 0);
    stmts_ = List_rest(g_, when_clause_, 1);

    gen_expr(g_, fn_arg_names_, lvar_names_, cond_expr_node_);
    asm_cp(s_0_, s_reg_b_);
    asm_compare();

    # {label_end_when_head}_{when_index}
    str_cp(&label_temp, &label_end_when_head);
    append_label_id(&label_temp, when_index, label_size);
    asm_jump_eq(&label_temp);

    gen_stmts(g_, fn_arg_names_, lvar_names_, stmts_);

    asm_jump(&label_end);

    # {label_end_when_head}_{when_index}
    str_cp(&label_temp, &label_end_when_head);
    append_label_id(&label_temp, when_index, label_size);
    asm_label(&label_temp);

    i = i + 1;
  end

  asm_label(&label_end);
end

def gen_vm_comment(g_, stmt_)
  asm_vm_comment(g_, List_get_as_str(stmt_, 1));
end

def gen_stmt(g_, fn_arg_names_, lvar_names_, stmt_)
  var head_str_ = List_get_as_str(stmt_, 0);

  case
  when (str_eq(head_str_, str_lit_set(g_)))
    gen_set(g_, fn_arg_names_, lvar_names_, stmt_);
  when (str_eq(head_str_, str_lit__cmt(g_)))
    gen_vm_comment(g_, stmt_);
  when (str_eq(head_str_, str_lit_call(g_)))
    gen_call(g_, fn_arg_names_, lvar_names_, stmt_);
  when (str_eq(head_str_, "return"))
    gen_return(g_, fn_arg_names_, lvar_names_, stmt_);
  when (str_eq(head_str_, str_lit_while(g_)))
    gen_while(g_, fn_arg_names_, lvar_names_, stmt_);
  when (str_eq(head_str_, "break"))
    gen_break(g_);
  when (str_eq(head_str_, "case"))
    gen_case(g_, fn_arg_names_, lvar_names_, stmt_);
  else
    panic(365); # gen_stmt
  end
end

def gen_stmts(g_, fn_arg_names_, lvar_names_, stmts_)
  var i = 0;
  var stmt_;

  while (i < List_size(stmts_))
    stmt_ = List_get_as_list(stmts_, i);
    gen_stmt(g_, fn_arg_names_, lvar_names_, stmt_);
    i = i + 1;
  end
end

def gen_var(g_, fn_arg_names_, lvar_names_, stmt_)
  var set_stmt_;

  asm_sub_sp(1);

  if (List_size(stmt_) == 3)
    set_stmt_ = List_new(g_);
    List_add_str(g_, set_stmt_, str_lit_set(g_));
    List_add(g_, set_stmt_, List_get(stmt_, 1));
    List_add(g_, set_stmt_, List_get(stmt_, 2));

    gen_set(g_, fn_arg_names_, lvar_names_, set_stmt_);
  end
end

def gen_var_array(g_, fn_arg_names_, lvar_names_, stmt_)
  var width = List_get_as_int(stmt_, 2);

  asm_sub_sp(width);
end

def gen_func(g_, func_)
  var fn_name_;
  var stmts_;
  var stmt_;
  var i;
  var lvar_names_;
  var lvar_name_;
  var lvar_width_;
  var fn_arg_names_;

  fn_name_ = Node_get_str(List_get(func_, 1));

  fn_arg_names_ =
    Names_from_node_list(
      g_,
      List_get_as_list(func_, 2)
    );

  stmts_ = Node_get_list(List_get(func_, 3));

  asm_label(fn_name_);

  asm_fn_prologue(g_);

  lvar_names_ = Names_new(g_);

  i = 0;
  while (i < List_size(stmts_))
    stmt_ = List_get_as_list(stmts_, i);

    case
    when (str_eq(List_get_as_str(stmt_, 0), "var"))
      lvar_name_ = List_get_as_str(stmt_, 1);
      Names_add(g_, lvar_names_, lvar_name_, 1);
      gen_var(g_, fn_arg_names_, lvar_names_, stmt_);
    when (str_eq_var_array(List_get_as_str(stmt_, 0)))
      lvar_name_ = List_get_as_str(stmt_, 1);
      lvar_width_ = List_get_as_int(stmt_, 2);
      Names_add(g_, lvar_names_, lvar_name_, lvar_width_);
      gen_var_array(g_, fn_arg_names_, lvar_names_, stmt_);
    else
      gen_stmt(g_, fn_arg_names_, lvar_names_, stmt_);
    end

    i = i + 1;
  end

  asm_fn_epilogue(g_);

  asm_ret();
end

def gen_top_stmt(g_, top_stmt_)
  var s_head_ = List_get_as_str(top_stmt_, 0);

  case
  when (str_eq(s_head_, "func"))
    gen_func(g_, top_stmt_);
  else
    panic(194); # gen_top_stmt
  end
end

def gen_top_stmts(g_, top_stmts_)
  var i;
  var top_stmt_;

  i = 1;
  while (i < List_size(top_stmts_))
    top_stmt_ = List_get_as_list(top_stmts_, i);
    gen_top_stmt(g_, top_stmt_);
    i = i + 1;
  end
end

# --------------------------------

def gen_builtin_write(g_)
  var [6]s_reg_a; str_set_reg_a(&s_reg_a);
  var [6]s_write;
  var s_fn_arg1_size = 7; var [7]s_fn_arg1;
  var s_fn_arg2_size = 7; var [7]s_fn_arg2;

  aset(&s_write, 0, 119); # w
  aset(&s_write, 1, 114); # r
  aset(&s_write, 2, 105); # i
  aset(&s_write, 3, 116); # t
  aset(&s_write, 4, 101); # e
  aset(&s_write, 5,   0);

  render_indirection_bp(&s_fn_arg1, 2, s_fn_arg1_size);
  render_indirection_bp(&s_fn_arg2, 3, s_fn_arg2_size);

  asm_label(&s_write);
  asm_fn_prologue(g_);

  asm_cp(&s_fn_arg1, &s_reg_a);

  asm_indent();
  print_s(&s_write);
  putchar(C_SPC()); print_s(&s_reg_a);
  putchar(C_SPC()); print_s(&s_fn_arg2);
  putchar(C_LF());

  asm_fn_epilogue(g_);
  asm_ret();
end

def gen_builtin_getchar(g_)
  var [6]s_reg_a; str_set_reg_a(&s_reg_a);
  var [8]s_getchar;
  var [5]s_read;
  var s_fn_arg1_size = 7; var [7]s_fn_arg1;

  aset(&s_getchar, 0, 103); # g
  aset(&s_getchar, 1, 101); # e
  aset(&s_getchar, 2, 116); # t
  aset(&s_getchar, 3,  99); # c
  aset(&s_getchar, 4, 104); # h
  aset(&s_getchar, 5,  97); # a
  aset(&s_getchar, 6, 114); # r
  aset(&s_getchar, 7,   0);

  aset(&s_read, 0, 114); # r
  aset(&s_read, 1, 101); # e
  aset(&s_read, 2,  97); # a
  aset(&s_read, 3, 100); # d
  aset(&s_read, 4,   0);

  render_indirection_bp(&s_fn_arg1, 2, s_fn_arg1_size);

  asm_label(&s_getchar);
  asm_fn_prologue(g_);

  asm_indent();
  print_s(&s_read);
  putchar(C_SPC()); print_s(&s_reg_a);
  putchar(C_LF());

  asm_fn_epilogue(g_);
  asm_ret();
end

def gen_builtin_get_sp(g_)
  var [6]s_reg_a; str_set_reg_a(&s_reg_a);
  var [7]s_get_sp;

  aset(&s_get_sp, 0, 103); # g
  aset(&s_get_sp, 1, 101); # e
  aset(&s_get_sp, 2, 116); # t
  aset(&s_get_sp, 3,  95); # _
  aset(&s_get_sp, 4, 115); # s
  aset(&s_get_sp, 5, 112); # p
  aset(&s_get_sp, 6,   0);

  asm_label(&s_get_sp);

  asm_fn_prologue(g_);

  asm_cp(str_lit_sp(g_), &s_reg_a);

  asm_fn_epilogue(g_);
  asm_ret();
end

def gen_builtin_panic()
  var [7]s__panic;

  aset(&s__panic, 0,  95); # _
  aset(&s__panic, 1, 112); # p
  aset(&s__panic, 2,  97); # a
  aset(&s__panic, 3, 110); # n
  aset(&s__panic, 4, 105); # i
  aset(&s__panic, 5,  99); # c
  aset(&s__panic, 6,   0);

  asm_label(&s__panic);

  asm_write(80, 2); # P
  asm_write(65, 2); # A
  asm_write(78, 2); # N
  asm_write(73, 2); # I
  asm_write(67, 2); # C
  asm_write(C_LF(), 2);

  asm_exit(1);
end

def gen_builtin_set_vram(g_)
  var [9]s_set_vram;
  var s_vram_addr_size = 7; var [7]s_vram_addr;
  var s_val_size = 7; var [7]s_val;

  aset(&s_set_vram, 0, 115); # s
  aset(&s_set_vram, 1, 101); # e
  aset(&s_set_vram, 2, 116); # t
  aset(&s_set_vram, 3,  95); # _
  aset(&s_set_vram, 4, 118); # v
  aset(&s_set_vram, 5, 114); # r
  aset(&s_set_vram, 6,  97); # a
  aset(&s_set_vram, 7, 109); # m
  aset(&s_set_vram, 8,   0);

  render_indirection_bp(&s_vram_addr, 2, s_vram_addr_size);

  render_indirection_bp(&s_val, 3, s_val_size);

  asm_label(&s_set_vram);
  asm_fn_prologue(g_);

  asm_set_vram(&s_vram_addr, &s_val);

  asm_fn_epilogue(g_);
  asm_ret();
end

def gen_builtin_get_vram(g_)
  var s_vram_addr_size = 7; var [7]s_vram_addr;
  var [6]s_reg_a; str_set_reg_a(&s_reg_a);
  var [9]s_get_vram;

  aset(&s_get_vram, 0, 103); # g
  aset(&s_get_vram, 1, 101); # e
  aset(&s_get_vram, 2, 116); # t
  aset(&s_get_vram, 3,  95); # _
  aset(&s_get_vram, 4, 118); # v
  aset(&s_get_vram, 5, 114); # r
  aset(&s_get_vram, 6,  97); # a
  aset(&s_get_vram, 7, 109); # m
  aset(&s_get_vram, 8,   0);

  render_indirection_bp(&s_vram_addr, 2, s_vram_addr_size);

  asm_label(&s_get_vram);
  asm_fn_prologue(g_);

  asm_get_vram(&s_vram_addr, &s_reg_a);

  asm_fn_epilogue(g_);
  asm_ret();
end

# --------------------------------

def codegen(g_, ast_)
  var [5]s_temp;

  aset(&s_temp, 0, 109); # m
  aset(&s_temp, 1,  97); # a
  aset(&s_temp, 2, 105); # i
  aset(&s_temp, 3, 110); # n
  aset(&s_temp, 4,   0);
  asm_call(g_, &s_temp);

  asm_exit(0);

  gen_top_stmts(g_, ast_);

  putchar( 35); # #
  putchar( 62); # >
  putchar( 98); # b
  putchar(117); # u
  putchar(105); # i
  putchar(108); # l
  putchar(116); # t
  putchar(105); # i
  putchar(110); # n
  putchar(115); # s
  putchar(C_LF());

  gen_builtin_write(g_);
  gen_builtin_getchar(g_);
  gen_builtin_get_sp(g_);
  gen_builtin_panic();
  gen_builtin_set_vram(g_);
  gen_builtin_get_vram(g_);

  putchar( 35); # #
  putchar( 60); # <
  putchar( 98); # b
  putchar(117); # u
  putchar(105); # i
  putchar(108); # l
  putchar(116); # t
  putchar(105); # i
  putchar(110); # n
  putchar(115); # s
  putchar(C_LF());
end

def GO_STRINGS() return GO_ALLOC_CURSOR() + GS_ALLOC_CURSOR(); end
def GS_STRINGS() return 1000; end

def GO_LABEL_ID() return GO_STRINGS() + GS_STRINGS(); end
def GS_LABEL_ID() return 1; end

def GO_WHILE_CURSOR() return GO_LABEL_ID() + GS_LABEL_ID(); end
def GS_WHILE_CURSOR() return 1; end

def GO_WHILE_STACK() return GO_WHILE_CURSOR() + GS_WHILE_CURSOR(); end
def GS_WHILE_STACK() return 10; end

def get_label_id(g_)
  return *(g_ + GO_LABEL_ID());
end

def inc_label_id(g_)
  *(g_ + GO_LABEL_ID()) = get_label_id(g_) + 1;
end

def load_ast(g_)
  var input_size_max = 240000; var [240000]input;

  read_stdin_all(&input, input_size_max);
  return Json_parse(g_, &input);
end

def main()
  var [1013]g;
  var ast_;

  # init globals
  init_alloc_cursor(&g);
  init_strings(&g);
  WhileStack_init(&g);

  ast_ = load_ast(&g);

  codegen(&g, ast_);
end
