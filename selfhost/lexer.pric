# -*- mode: ruby -*-

#include lib/std.pric
#include lib/words.pric

def is_ident_char(c)
  case
  when (range_include(48, 57, c)) # 0..9
    return true;
  when (range_include(65, 90, c)) # A..Z
    return true;
  when (range_include(97, 122, c)) # a..z
    return true;
  when (c == 95) # _
    return true;
  else
    return false;
  end
end

def find_non_ident_char(input_, pos_from)
  var pos = pos_from;
  var c = char_at(input_, pos);

  while (is_ident_char(c))
    pos = pos + 1;
    c = char_at(input_, pos);
  end

  return pos;
end

def match_ident(input_, pos_from)
  var pos = find_non_ident_char(input_, pos_from);
  return __sub(pos, pos_from);
end

def match_symbol(input_, pos_from)
  var c0 = char_at(input_, pos_from);
  var c1 = char_at(input_, pos_from + 1);

  case
  when (__and(c0 == 61, c1 == 61)) # ==
    return 2;
  when (__and(c0 == 33, c1 == 61)) # !=
    return 2;
  when (c0 == 38) # &
    return 1;
  when (c0 == 40) # (
    return 1;
  when (c0 == 41) # )
    return 1;
  when (c0 == 42) # *
    return 1;
  when (c0 == 43) # +
    return 1;
  when (c0 == C_COMMA())
    return 1;
  when (c0 == 59) # ;
    return 1;
  when (c0 == 60) # <
    return 1;
  when (c0 == 61) # =
    return 1;
  when (c0 == 91) # [
    return 1;
  when (c0 == 93) # ]
    return 1;
  else
    return 0;
  end
end

def match_comment(input_, pos_from)
  if (char_at(input_, pos_from + 0) == 35) # #
    return __sub(
      char_index(input_, C_LF(), pos_from),
      pos_from
    );
  else
    return 0;
  end
end

def match_int(input_, pos_from)
  var c = char_at(input_, pos_from);
  var pos;

  if (c == 45) # -
    pos = non_digit_index(input_, pos_from + 1);
  else
    pos = non_digit_index(input_, pos_from);
  end

  return __sub(pos, pos_from);
end

def match_str(input_, pos_from)
  var pos;

  if (char_at(input_, pos_from) == C_DQ())
    pos = char_index(input_, C_DQ(), pos_from + 1);
    return __sub(pos, pos_from + 1);
  else
    return 0;
  end
end

def is_kw(g_, str_)
  case
  when (str_eq_def(   str_  )) return true;
  when (str_eq_end(   str_  )) return true;
  when (str_eq_var(   str_  )) return true;
  when (str_eq_return(str_  )) return true;
  when (str_eq_while( str_  )) return true;
  when (str_eq_case(  str_  )) return true;
  when (str_eq_when(  str_  )) return true;
  when (str_eq_else(  str_  )) return true;
  when (str_eq__cmt(  str_  )) return true;
  when (str_eq(str_, "true" )) return true;
  when (str_eq(str_, "false")) return true;
  when (str_eq_if(    str_  )) return true;
  else
    return false;
  end
end

def print_kw(str_)
  putchar(107); # k
  putchar(119); # w
  putchar( 58); # :
  print_s(str_);
  putchar(C_LF());
end

def print_ident(str_)
  putchar(105); # i
  putchar(100); # d
  putchar(101); # e
  putchar(110); # n
  putchar(116); # t
  putchar( 58); # :
  print_s(str_);
  putchar(C_LF());
end

def print_symbol(str_)
  putchar(115); # s
  putchar(121); # y
  putchar(109); # m
  putchar( 58); # :
  print_s(str_);
  putchar(C_LF());
end

def print_int(str_)
  putchar(105); # i
  putchar(110); # n
  putchar(116); # t
  putchar( 58); # :
  print_s(str_);
  putchar(C_LF());
end

def print_str(str_)
  putchar(115); # s
  putchar(116); # t
  putchar(114); # r
  putchar( 58); # :
  print_s(str_);
  putchar(C_LF());
end

def lex(g_)
  var [60000]input; # INPUT_MAX
  var pos = 0;
  var do_break = false;
  var size;
  var [5]s_case; str_set_case(&s_case);
  var [5]s_when; str_set_when(&s_when);
  var s_temp_size = 40; var [40]s_temp;
  var c;

  read_stdin_all(&input, INPUT_MAX());

  c = char_at(&input, pos);

  while (__not(do_break))
    case
    when (__or(c == C_SPC(), c == C_LF()))
      pos = pos + 1;

    when (0 < match_comment(&input, pos))
      size = match_comment(&input, pos);
      pos = pos + size;

    when (0 < match_symbol(&input, pos))
      size = match_symbol(&input, pos);
      substr(&s_temp, &input, pos, pos + size);
      print_symbol(&s_temp);
      pos = pos + size;

    when (0 < match_str(&input, pos))
      size = match_str(&input, pos);

      substr_with_check(
        &s_temp, &input, pos + 1, pos + 1 + size,
        s_temp_size
      );

      print_str(&s_temp);
      pos = pos + size + 2;

    when (0 < match_int(&input, pos))
      size = match_int(&input, pos);
      substr(&s_temp, &input, pos, pos + size);
      print_int(&s_temp);
      pos = pos + size;

    when (0 < match_ident(&input, pos))
      size = match_ident(&input, pos);
      substr_with_check(&s_temp, &input, pos, pos + size, s_temp_size);

      if (is_kw(g_, &s_temp))
        if (str_eq_if(&s_temp))
          print_kw(&s_case);
          print_kw(&s_when);
        else
          print_kw(&s_temp);
        end
      else
        print_ident(&s_temp);
      end

      pos = pos + size;

    else
      p_i(pos);
      p_c(c);
      panic(239); # lex: unexpected pattern
    end

    c = char_at(&input, pos);
    if (__or(
          c == 0,
          __le(INPUT_MAX(), pos)
        ))
      do_break = true;
    end
  end
end

# --------------------------------

def GO_STRINGS() return GO_ALLOC_CURSOR() + GS_ALLOC_CURSOR(); end
def GS_STRINGS() return 1000; end

def INPUT_MAX() return 60000; end

def main()
  var [1001]g;
  var g_ = &g;

  # init globals
  init_alloc_cursor(&g);
  init_strings(&g);

  lex(g_);
end
