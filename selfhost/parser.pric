# -*- mode: ruby -*-

#include lib/std.pric
#include lib/words.pric
#include lib/types.pric
#include lib/json.pric

def str_lit_GO_STRINGS(g_)
  return "GO_STRINGS";
end

def str_lit_funcall(g_)
  return "funcall";
end

def str_lit_offset_(g_)
  return "offset_";
end

def str_lit_g_(g_)
  return "g_";
end

def str_lit_plus(g_)
  return "+";
end

# --------------------------------

def get_line_size(input_, pos_from)
  var pos_to;
  var lf_pos = char_index(input_, C_LF(), pos_from);

  if (lf_pos != -1)
    pos_to = lf_pos + 1;
  else
    # LF not found
    pos_to = char_index(input_, 0, pos_from);
  end

  return __sub(pos_to, pos_from);
end

def set_token(g_, ti, t_)
  if (__le(NUM_TOKENS_MAX(), ti))
    p_i(NUM_TOKENS_MAX());
    p_i(ti);
    panic(27); # set_token: capacity over
  end
  aset(g_ + GO_TOKENS(), ti, t_);
end

def read_tokens(g_)
  var do_break = false;
  var line_size = 80; var [80]line;
  var size;
  var pos = 0;
  var sep_i;
  var [6]kind_str;
  var value_str_size = 64; var [64]value_str;
  var t_;
  var ti;
  var input_size_max = 150000; var [150000]input;
  check_heap_stack_overlap(g_);

  read_stdin_all(&input, input_size_max);

  while (__not(do_break))
    size = get_line_size(&input, pos);
    if (size == 0)
      do_break = true;
    else
      substr_with_check(&line, &input, pos, pos + size, line_size);
      chomp(&line);

      sep_i = char_index(&line, 58, 0); # :
      substr(&kind_str, &line, 0, sep_i);
      substr_with_check(&value_str, &line, sep_i + 1, str_size(&line), value_str_size);

      t_ = Token_new(g_, &kind_str, &value_str);
      set_token(g_, ti, t_);
      ti = ti + 1;

      pos = pos + size;
    end
  end

  set_num_tokens(g_, ti); # ti == number of tokens
end

def set_num_tokens(g_, num_tokens)
  *(g_ + GO_NUM_TOKENS()) = num_tokens;
end

def get_num_tokens(g_)
  return *(g_ + GO_NUM_TOKENS());
end

def is_end(g_)
  var num_tokens = get_num_tokens(g_);
  var ti = get_token_index(g_);

  return __le(num_tokens, ti);
end

# --------------------------------

def set_token_index(g_, ti)
  *(g_ + GO_TOKEN_INDEX()) = ti;
end

def get_token_index(g_)
  return *(g_ + GO_TOKEN_INDEX());
end

def inc_token_index(g_)
  set_token_index(
    g_,
    get_token_index(g_) + 1
  );
end

def peek(g_, i)
  var ti = get_token_index(g_);
  return *(g_ + GO_TOKENS() + ti + i);
end

def consume_kw(g_, str_)
  var t_ = peek(g_, 0);

  if (__and(
        Token_kind_eq(t_, TOKEN_KIND__KW()),
        Token_val_eq(t_, str_)
  ))
    inc_token_index(g_);
  else
    print_i_e(TOKEN_KIND__KW());
    putchar_e(47); # /
    print_s_e(str_);
    putchar_e(47); # /
    putchar_e(C_LF());

    print_i_e(Token_get_kind(t_));
    putchar_e(47); # /
    print_s_e(Token_get_val(t_));
    putchar_e(47); # /
    putchar_e(C_LF());

    panic(98); # consume_kw
  end
end

def consume_sym(g_, str_)
  var t_ = peek(g_, 0);
  if (__and(
        Token_kind_eq(t_, TOKEN_KIND__SYM()),
        Token_val_eq(t_, str_)
  ))
    inc_token_index(g_);
  else
    p_s(str_); # expected
    p_i(Token_get_kind(t_));
    p_s(Token_get_val(t_)); # actual
    panic(117); # consume_sym: unexpected token
  end
end

# --------------------------------

def consume_sym_one_char(g_, c)
  var [2]str;

  aset(&str, 0, c);
  aset(&str, 1, 0);

  consume_sym(g_, &str);
end

def consume_sym_paren_l(g_)
  consume_sym_one_char(g_, 40); # (
end

def consume_sym_paren_r(g_)
  consume_sym_one_char(g_, 41); # )
end

def consume_sym_cbracket_l(g_)
  consume_sym_one_char(g_, 123); # {
end

def consume_sym_cbracket_r(g_)
  consume_sym_one_char(g_, 125); # }
end

def consume_sym_semicolon(g_)
  consume_sym_one_char(g_, 59); # ;
end

def consume_sym_equal(g_)
  consume_sym_one_char(g_, 61); # =
end

# --------------------------------

def StrLitList_init(g_)
  *(g_ + GO_STR_LIT_LIST()) = List_new(g_);
end

def StrLitList_get_self(g_)
  return *(g_ + GO_STR_LIT_LIST());
end

def StrLitList_get_offset(g_)
  var self_ = StrLitList_get_self(g_);
  var offset = 0;
  var s_temp_;
  var i;

  i = 0;
  while (i < List_size(self_))
    s_temp_ = List_get_as_str(self_, i);
    offset = offset + str_size(s_temp_) + 1;
    i = i + 1;
  end

  return offset;
end

# --------------------------------

def _parse_arg(g_)
  var n;
  var t_ = peek(g_, 0);
  inc_token_index(g_);

  case
  when (Token_kind_eq(t_, TOKEN_KIND__IDENT()))
    return Node_new_str(g_, Token_get_val(t_));
  else
    panic(202); # _parse_arg: unsupported
  end
end

def parse_args(g_)
  var args_;
  var t_;
  var arg_node_;
  var do_break = false;
  var [2]s_comma;

  aset(&s_comma, 0, C_COMMA());
  aset(&s_comma, 1,  0);

  args_ = List_new(g_);

  t_ = peek(g_, 0);

  if (char_at(Token_get_val(t_), 0) == 41) # )
    return args_;
  end

  arg_node_ = _parse_arg(g_);
  List_add(args_, arg_node_);

  while (__not(do_break))
    t_ = peek(g_, 0);

    if (char_at(Token_get_val(t_), 0) == C_COMMA())
      consume_sym(g_, &s_comma);
      arg_node_ = _parse_arg(g_);
      List_add(args_, arg_node_);
    else
      do_break = true;
    end
  end

  return args_;
end

def parse_exprs(g_)
  var exprs_;
  var t_;
  var expr_node_;
  var do_break = false;
  var [2]s_comma;

  aset(&s_comma, 0, C_COMMA());
  aset(&s_comma, 1,  0);

  exprs_ = List_new(g_);

  t_ = peek(g_, 0);

  if (char_at(Token_get_val(t_), 0) == 41) # )
    return exprs_;
  end

  expr_node_ = parse_expr(g_);
  List_add(exprs_, expr_node_);

  while (__not(do_break))
    t_ = peek(g_, 0);

    if (char_at(Token_get_val(t_), 0) == C_COMMA())
      consume_sym(g_, &s_comma);
      expr_node_ = parse_expr(g_);
      List_add(exprs_, expr_node_);
    else
      do_break = true;
    end
  end

  return exprs_;
end

def parse_func(g_)
  var func_stmt_;
  var t_;
  var stmts_;
  var stmt_;
  var do_break = false;
  var [4]s_var; str_set_var(&s_var);
  var [5]s_func; str_set_func(&s_func);
  var [4]s_def; str_set_def(&s_def);
  var [4]s_end; str_set_end(&s_end);
  var args_;
  var fn_name_;
  check_heap_stack_overlap(g_);

  consume_kw(g_, &s_def);

  func_stmt_ = List_new(g_);

  List_add_str(g_, func_stmt_, &s_func);

  t_ = peek(g_, 0);
  inc_token_index(g_);
  fn_name_ = Token_get_val(t_);
  List_add_str(g_, func_stmt_, fn_name_);

  consume_sym_paren_l(g_); # (

  args_ = parse_args(g_);
  List_add_list(g_, func_stmt_, args_);

  consume_sym_paren_r(g_); # )

  stmts_ = List_new(g_);

  while (__not(do_break))
    t_ = peek(g_, 0);
    case
    when (Token_val_eq(t_, &s_end))
      do_break = true;
    when (char_at(Token_get_val(t_), 0) == 125) # }
      do_break = true;
    else

      if (str_eq(Token_get_val(t_), &s_var))
        stmt_ = parse_var(g_);
      else
        stmt_ = parse_stmt(g_);
      end
      List_add_list(g_, stmts_, stmt_);

    end
  end

  consume_kw(g_, &s_end);

  List_add_list(g_, func_stmt_, stmts_);

  return func_stmt_;
end

def _parse_var_declare(g_)
  var stmt_;
  var [4]s_var; str_set_var(&s_var);
  var t_;
  var var_name_;
  check_heap_stack_overlap(g_);

  stmt_ = List_new(g_);

  consume_kw(g_, &s_var);
  List_add_str(g_, stmt_, &s_var);

  t_ = peek(g_, 0);
  inc_token_index(g_);
  var_name_ = Token_get_val(t_);
  List_add_str(g_, stmt_, var_name_);

  consume_sym_semicolon(g_); # ;

  return stmt_;
end

def _parse_var_init(g_)
  var stmt_;
  var [4]s_var; str_set_var(&s_var);
  var t_;
  var var_name_;
  var expr_node_;
  check_heap_stack_overlap(g_);

  stmt_ = List_new(g_);

  consume_kw(g_, &s_var);
  List_add_str(g_, stmt_, &s_var);

  t_ = peek(g_, 0);
  inc_token_index(g_);
  var_name_ = Token_get_val(t_);
  List_add_str(g_, stmt_, var_name_);

  consume_sym_equal(g_); # =

  expr_node_ = parse_expr(g_);
  List_add(stmt_, expr_node_);

  consume_sym_semicolon(g_); # ;

  return stmt_;
end

def _parse_var_array(g_)
  var t_;
  var width;
  var var_name_;
  var stmt_;
  var [4]s_var; str_set_var(&s_var);
  var [10]s_var_array; str_set_var_array(&s_var_array);

  consume_kw(g_, &s_var);

  consume_sym_one_char(g_, 91); # [

  t_ = peek(g_, 0);
  inc_token_index(g_);
  width = parse_int(Token_get_val(t_));

  consume_sym_one_char(g_, 93); # ]

  var_name_ = Token_get_val(peek(g_, 0));
  inc_token_index(g_);

  consume_sym_semicolon(g_);

  stmt_ = List_new(g_);
  List_add_str(g_, stmt_, &s_var_array);
  List_add_str(g_, stmt_, var_name_);
  List_add_int(g_, stmt_, width);

  return stmt_;
end

def parse_var(g_)
  var [2]s_semicolon;
  var [2]s_equal;
  var t_;

  aset(&s_semicolon, 0, 59); # ;
  aset(&s_semicolon, 1,  0);

  aset(&s_equal, 0, 61); # =
  aset(&s_equal, 1,  0);

  t_ = peek(g_, 1);

  if (char_at(Token_get_val(t_), 0) == 91) # [
    _parse_var_array(g_);
  else

    t_ = peek(g_, 2);
    case
    when (Token_val_eq(t_, &s_semicolon))
      _parse_var_declare(g_);
    when (Token_val_eq(t_, &s_equal))
      _parse_var_init(g_);
    else
      print_s(Token_get_val(t_));
      panic(426); # parse_var: unexpected token
    end

  end
end

def parse_expr_addr(g_)
  var t_;
  var var_name_;
  var expr_list_;
  var expr_node_;
  var [5]s_addr; str_set_addr(&s_addr);

  consume_sym_one_char(g_, 38); # &

  t_ = peek(g_, 0);
  inc_token_index(g_);
  var var_name_ = Token_get_val(t_);

  expr_list_ = List_new(g_);
  List_add_str(g_, expr_list_, &s_addr);
  List_add_str(g_, expr_list_, var_name_);

  expr_node_ = Node_new_list(g_, expr_list_);

  return expr_node_;
end

def parse_expr_deref(g_)
  var list_;
  var expr_node_;
  var [6]s_deref; str_set_deref(&s_deref);

  consume_sym_one_char(g_, 42); # *
  consume_sym_paren_l(g_);      # (
  expr_node_ = parse_expr(g_);
  consume_sym_paren_r(g_);      # )

  list_ = List_new(g_);
  List_add_str(g_, list_, &s_deref);
  List_add(list_, expr_node_);

  return Node_new_list(g_, list_);
end

def is_binop(t_)
  var [3]s_double_equal;
  var [3]s_not_equal;

  aset(&s_double_equal, 0, 61); # =
  aset(&s_double_equal, 1, 61); # =
  aset(&s_double_equal, 2,  0);

  aset(&s_not_equal, 0, 33); # !
  aset(&s_not_equal, 1, 61); # =
  aset(&s_not_equal, 2,  0);

  case
  when (char_at(Token_get_val(t_), 0) == 43) # +
    return true;
  when (char_at(Token_get_val(t_), 0) == 42) # *
    return true;
  when (Token_val_eq(t_, &s_double_equal))
    return true;
  when (Token_val_eq(t_, &s_not_equal))
    return true;
  when (char_at(Token_get_val(t_), 0) == 60) # <
    return true;
  else
    return false;
  end
end

def _make_str_expr(g_, offset)
  var expr1_ = List_new(g_);
  var expr2_ = List_new(g_);
  var expr3_ = List_new(g_);

  # GO_STRINGS()
  List_add_str(g_, expr1_, str_lit_funcall(g_));
  List_add_str(g_, expr1_, str_lit_GO_STRINGS(g_));

  # g_ + GO_STRINGS()
  List_add_str(g_, expr2_, str_lit_plus(g_));
  List_add_str(g_, expr2_, str_lit_g_(g_));
  List_add_list(g_, expr2_, expr1_);

  # g_ + GO_STRINGS() + offset
  List_add_str(g_, expr3_, str_lit_plus(g_));
  List_add_list(g_, expr3_, expr2_);
  List_add_int(g_, expr3_, offset);

  return expr3_;
end

def _parse_expr_factor(g_)
  var t_;
  var n;
  var expr_node_;
  var funcall_;
  var funcall_list_;
  var [8]s_funcall; str_set_funcall(&s_funcall);
  var i;
  var str_offset;
  var expr_list_;
  var str_lit_list_;

  t_ = peek(g_, 0);

  case
  when (Token_kind_eq(t_, TOKEN_KIND__INT()))
    inc_token_index(g_);

    n = parse_int(Token_get_val(t_));
    expr_node_ = Node_new_int(g_, n);

  when (Token_kind_eq(t_, TOKEN_KIND__IDENT()))

    if (char_at(Token_get_val(peek(g_, 1)), 0) == 40) # (
      funcall_ = parse_funcall(g_);

      funcall_list_ = List_new(g_);
      List_add_str(g_, funcall_list_, &s_funcall);

      i = 0;
      while (i < List_size(funcall_))
        List_add(funcall_list_, List_get(funcall_, i));
        i = i + 1;
      end

      expr_node_ = Node_new_list(g_, funcall_list_);
    else
      inc_token_index(g_);

      expr_node_ = Node_new_str(g_, Token_get_val(t_));
    end

  when (Token_kind_eq(t_, TOKEN_KIND__SYM()))

    case
    when (char_at(Token_get_val(t_), 0) == 40) # (
      consume_sym_paren_l(g_); # (
      expr_node_ = parse_expr(g_);
      consume_sym_paren_r(g_); # )

    when (char_at(Token_get_val(t_), 0) == 38) # &
      expr_node_ = parse_expr_addr(g_);

    when (char_at(Token_get_val(t_), 0) == 42) # *
      expr_node_ = parse_expr_deref(g_);

    else
      panic(640); # unexpected symbol
    end

  when (Token_kind_eq(t_, TOKEN_KIND__KW()))
    if (
      __or(
        str_eq(Token_get_val(t_), "true"),
        str_eq_false(Token_get_val(t_))
      )
    )
      expr_node_ = Node_new_str(g_, Token_get_val(t_));
      inc_token_index(g_);
    else
      panic(563); # unexpected token
    end

  when (Token_kind_eq(t_, TOKEN_KIND__STR()))
    inc_token_index(g_);

    str_offset = StrLitList_get_offset(g_);

    # # debug
    # print_i_e(str_offset);
    # putchar_e(C_SPC());
    # print_s_e(Token_get_val(t_));
    # putchar_e(C_LF());

    List_add_str(g_, StrLitList_get_self(g_), Token_get_val(t_));

    expr_list_ = _make_str_expr(g_, str_offset);
    expr_node_ = Node_new_list(g_, expr_list_);

  else
    Json_print(Token_to_plain(g_, t_));
    panic(645); # not yet impl
  end

  return expr_node_;
end

def parse_expr(g_)
  var list_;
  var expr_node_;
  var factor_node_;
  var s_op_size = 4; var [4]s_op;

  expr_node_ = _parse_expr_factor(g_);

  while (is_binop(peek(g_, 0)))
    str_cp_with_check(
      &s_op,
      Token_get_val(peek(g_, 0)),
      s_op_size
    );
    inc_token_index(g_);

    factor_node_ = _parse_expr_factor(g_);

    list_ = List_new(g_);
    List_add_str(g_, list_, &s_op);
    List_add(list_, expr_node_);
    List_add(list_, factor_node_);

    expr_node_ = Node_new_list(g_, list_);
  end

  return expr_node_;
end

def parse_set(g_)
  var stmt_;
  var [4]s_set; str_set_set(&s_set);
  var t_;
  var lhs_node_;
  var expr_node_;

  t_ = peek(g_, 0);

  if (char_at(Token_get_val(t_), 0) == 42) # *
    lhs_node_ = parse_expr_deref(g_);
  else
    inc_token_index(g_);
    lhs_node_ = Node_new_str(g_, Token_get_val(t_));
  end

  consume_sym_equal(g_); # =

  expr_node_ = parse_expr(g_);

  consume_sym_semicolon(g_); # ;

  stmt_ = List_new(g_);
  List_add_str(g_, stmt_, &s_set);
  List_add(stmt_, lhs_node_);
  List_add(stmt_, expr_node_);

  return stmt_;
end

def parse_funcall(g_)
  var t_;
  var fn_name_;
  var funcall_;
  var args_;

  t_ = peek(g_, 0);
  inc_token_index(g_);
  fn_name_ = Token_get_val(t_);

  consume_sym_paren_l(g_); # (
  args_ = parse_exprs(g_);
  consume_sym_paren_r(g_); # )

  funcall_ = List_new(g_);
  List_add_str(g_, funcall_, fn_name_);

  List_add_all(funcall_, args_);

  return funcall_;
end

def parse_call(g_)
  var stmt_;
  var [5]s_call; str_set_call(&s_call);
  var funcall_;

  stmt_ = List_new(g_);

  List_add_str(g_, stmt_, &s_call);

  funcall_ = parse_funcall(g_);
  List_add_all(stmt_, funcall_);

  consume_sym_semicolon(g_); # ;

  return stmt_;
end

def parse_return(g_)
  var expr_;
  var stmt_;
  var [7]s_return; str_set_return(&s_return);

  consume_kw(g_, &s_return);

  var expr_ = parse_expr(g_);

  consume_sym_semicolon(g_); # ;

  stmt_ = List_new(g_);
  List_add_str(g_, stmt_, &s_return);
  List_add(stmt_, expr_);

  return stmt_;
end

def parse_while(g_)
  var [6]s_while; str_set_while(&s_while);
  var [4]s_end; str_set_end(&s_end);
  var stmt_;
  var expr_node_;
  var stmts_;

  consume_kw(g_, &s_while);

  consume_sym_paren_l(g_); # (
  expr_node_ = parse_expr(g_);
  consume_sym_paren_r(g_); # )

  stmts_ = parse_stmts(g_);

  consume_kw(g_, &s_end);

  stmt_ = List_new(g_);
  List_add_str(g_, stmt_, &s_while);
  List_add(stmt_, expr_node_);
  List_add_list(g_, stmt_, stmts_);

  return stmt_;
end

def _parse_when_clause(g_)
  var when_clause_;
  var cond_expr_node_;
  var stmts_;
  var [5]s_when; str_set_when(&s_when);
  var [5]s_else; str_set_else(&s_else);
  var t_;

  t_ = peek(g_, 0);

  case
  when (str_eq_when(Token_get_val(t_)))
    consume_kw(g_, &s_when);

    consume_sym_paren_l(g_); # (
    cond_expr_node_ = parse_expr(g_);
    consume_sym_paren_r(g_); # )
  when (str_eq_else(Token_get_val(t_)))
    consume_kw(g_, &s_else);
    cond_expr_node_ = Node_new_int(g_, 1);
  else
    panic(748); # _parse_when_clause
  end

  stmts_ = parse_stmts(g_);

  when_clause_ = List_new(g_);
  List_add(when_clause_, cond_expr_node_);
  List_add_all(when_clause_, stmts_);

  return when_clause_;
end

def parse_case(g_)
  var stmt_;
  var [5]s_case; str_set_case(&s_case);
  var [4]s_end; str_set_end(&s_end);
  var when_clause_;

  consume_kw(g_, &s_case);

  stmt_ = List_new(g_);
  List_add_str(g_, stmt_, &s_case);

  while (__not(Token_val_eq(peek(g_, 0), &s_end)))
    when_clause_ = _parse_when_clause(g_);
    List_add_list(g_, stmt_, when_clause_);
  end

  consume_kw(g_, &s_end);

  return stmt_;
end

def parse_vm_comment(g_)
  var t_;
  var [5]s__cmt; str_set__cmt(&s__cmt);
  var stmt_;

  stmt_ = List_new(g_);

  consume_kw(g_, &s__cmt);
  consume_sym_paren_l(g_); # (

  t_ = peek(g_, 0);
  inc_token_index(g_);

  List_add_str(g_, stmt_, &s__cmt);
  List_add_str(g_, stmt_, Token_get_val(t_));

  consume_sym_paren_r(g_); # )
  consume_sym_semicolon(g_); # ;

  return stmt_;
end

def parse_stmt(g_)
  var t_;

  t_ = peek(g_, 0);

  case
  when (str_eq__cmt(Token_get_val(t_)))
    return parse_vm_comment(g_);
  when (str_eq_return(Token_get_val(t_)))
    return parse_return(g_);
  when (str_eq_while(Token_get_val(t_)))
    return parse_while(g_);
  when (str_eq_case(Token_get_val(t_)))
    return parse_case(g_);
  else
    case
    when (
      __and(
        Token_get_kind(peek(g_, 0)) == TOKEN_KIND__IDENT(),
        char_at(Token_get_val(peek(g_, 1)), 0) == 40 # (
      )
    )
      return parse_call(g_);
    else
      return parse_set(g_);
    end
  end
end

def parse_stmts(g_)
  var stmt_;
  var stmts_;
  var do_break = false;
  var t_;

  stmts_ = List_new(g_);

  while (__not(do_break))
    t_ = peek(g_, 0);

    case
    when (char_at(Token_get_val(t_), 0) == 125) # }
      do_break = true;
    when (str_eq_when(Token_get_val(t_)))
      do_break = true;
    when (str_eq_else(Token_get_val(t_)))
      do_break = true;
    when (str_eq_end(Token_get_val(t_)))
      do_break = true;
    else
      stmt_ = parse_stmt(g_);
      List_add_list(g_, stmts_, stmt_);
    end
  end

  return stmts_;
end

def parse_top_stmt(g_)
  var t_ = peek(g_, 0);

  if (str_eq_def(Token_get_val(t_)))
    return parse_func(g_);
  else
    panic(770); # parse_top_stmt
  end
end

def parse_top_stmts(g_)
  var top_stmts_;
  var top_stmt_;
  var [10]s_temp;

  top_stmts_ = List_new(g_);

  aset(&s_temp, 0, 116); # t
  aset(&s_temp, 1, 111); # o
  aset(&s_temp, 2, 112); # p
  aset(&s_temp, 3,  95); # _
  aset(&s_temp, 4, 115); # s
  aset(&s_temp, 5, 116); # t
  aset(&s_temp, 6, 109); # m
  aset(&s_temp, 7, 116); # t
  aset(&s_temp, 8, 115); # s
  aset(&s_temp, 9,   0);
  List_add_str(g_, top_stmts_, &s_temp);

  while (__not(is_end(g_)))
    top_stmt_ = parse_top_stmt(g_);
    List_add_list(g_, top_stmts_, top_stmt_);
  end

  return top_stmts_;
end

def parse(g_)
  return parse_top_stmts(g_);
end

def make_set_char_stmt(g_, ci, c)
  var expr1_ = List_new(g_);
  var expr2_ = List_new(g_);
  var stmt_ = List_new(g_);

  # offset_ + ci
  List_add_str(g_, expr1_, str_lit_plus(g_));
  List_add_str(g_, expr1_, str_lit_offset_(g_));
  List_add_int(g_, expr1_, ci);

  # *(offset_ + ci)
  List_add_str(g_, expr2_, "deref");
  List_add_list(g_, expr2_, expr1_);

  # *(offset_ + ci) = c
  List_add_str(g_, stmt_, "set");
  List_add_list(g_, stmt_, expr2_);
  List_add_int(g_, stmt_, c);

  return stmt_;
end

def make_fn_init_strings(g_)
  var fn_ = List_new(g_);
  var args_ = List_new(g_);
  var stmts_ = List_new(g_);

  List_add_str(g_, args_, str_lit_g_(g_));

  # ----
  # var offset_ = g_ + GO_STRINGS();

  # GO_STRINGS()
  var funcall_ = List_new(g_);
  List_add_str(g_, funcall_, str_lit_funcall(g_));
  List_add_str(g_, funcall_, str_lit_GO_STRINGS(g_));

  # g_  + GO_STRINGS()
  var g_funcall_ = List_new(g_);
  List_add_str(g_, g_funcall_, str_lit_plus(g_));
  List_add_str(g_, g_funcall_, str_lit_g_(g_));
  List_add_list(g_, g_funcall_, funcall_);

  # var offset_ = g_ + GO_STRINGS()
  var var_offset_ = List_new(g_);
  List_add_str(g_, var_offset_, "var");
  List_add_str(g_, var_offset_, str_lit_offset_(g_));
  List_add_list(g_, var_offset_, g_funcall_);

  List_add_list(g_, stmts_, var_offset_);

  # ----

  var i = 0;
  var ci = 0;
  var str_ci;
  var str_;
  var c;
  var str_lit_list_ = StrLitList_get_self(g_);
  while (i < List_size(str_lit_list_))
    str_ = List_get_as_str(str_lit_list_, i);
    str_ci = 0;
    while (str_ci < str_size(str_))
      c = char_at(str_, str_ci);
      List_add_list(g_, stmts_, make_set_char_stmt(g_, ci, c));
      ci = ci + 1;
      str_ci = str_ci + 1;
    end
    List_add_list(g_, stmts_, make_set_char_stmt(g_, ci, 0));
    ci = ci + 1;
    i = i + 1;
  end

  # ----

  List_add_str(g_, fn_, "func");
  List_add_str(g_, fn_, "init_strings");
  List_add_list(g_, fn_, args_);
  List_add_list(g_, fn_, stmts_);

  return fn_;
end

def GO_STRINGS() return GO_ALLOC_CURSOR() + GS_ALLOC_CURSOR(); end
def GS_STRINGS() return 1000; end

def GO_TOKENS() return GO_STRINGS() + GS_STRINGS(); end
def GS_TOKENS() return 15000; end

def GO_TOKEN_INDEX() return GO_TOKENS() + GS_TOKENS(); end
def GS_TOKEN_INDEX() return 1; end

def GO_NUM_TOKENS() return GO_TOKEN_INDEX() + GS_TOKEN_INDEX(); end
def GS_NUM_TOKENS() return 1; end

def GO_STR_LIT_LIST() return GO_NUM_TOKENS() + GS_NUM_TOKENS(); end
def GS_STR_LIT_LIST() return 1; end

def NUM_TOKENS_MAX()
  return GS_TOKENS();
end

def main()
  var [16004]g;
  var g_ = &g;

  # init globals
  init_alloc_cursor(&g);
  init_strings(&g);

  StrLitList_init(&g);
  set_token_index(&g, 0);
  assert(0, get_token_index(&g), 183);

  read_tokens(&g);

  var ast_ = parse(&g);

  var fn_init_strings_;
  if (0 < List_size(StrLitList_get_self(g_)))
    fn_init_strings_ = make_fn_init_strings(&g);
    List_add_list(&g, ast_, fn_init_strings_);
  end

  Json_print(ast_);
end
