# -*- mode: ruby -*-

# G: global
# O: offset
# S: size

def GO_ALLOC_CURSOR() return 0; end
def GS_ALLOC_CURSOR() return 1; end

def C_LF   () return 10; end # 0x0a
def C_SPC  () return 32; end # 0x20
def C_DQ   () return 34; end # 0x22
def C_COMMA() return 44; end # 0x2c

def DEBUG() return 0; end

# --------------------------------

global g_main_;

def get_g_main()
  return g_main_;
end

def init_globals(g_)
  g_main_ = g_;
  init_alloc_cursor(g_);
end

def check_heap_stack_overlap()
  var g_ = get_g_main();
  var heap_max = *(g_ + GO_ALLOC_CURSOR());
  var sp = get_sp();

  if (__le(sp, heap_max))
    panic(25); # check_heap_stack_overlap: out of memory
  end
end

def allocate(size)
  var g_ = get_g_main();
  var head_addr = *(g_ + GO_ALLOC_CURSOR());
  var next_addr = *(g_ + GO_ALLOC_CURSOR()) + size;

  *(g_ + GO_ALLOC_CURSOR()) = next_addr;
  check_heap_stack_overlap();

  return head_addr;
end

def init_alloc_cursor(g_)
  *(g_ + GO_ALLOC_CURSOR()) = 20;
end

# --------------------------------

def putchar(c)
  write(c, 1);
end

def putchar_e(c)
  write(c, 2);
end

def _print_s(str_, fd)
  var i = 0;
  var c = char_at(str_, i);

  while (c != 0)
    write(c, fd);
    i = i + 1;
    c = char_at(str_, i);
  end
end

def print_s(str_)
  _print_s(str_, 1);
end

def print_s_e(str_)
  _print_s(str_, 2);
end

def println(str_)
  print_s(str_);
  putchar(C_LF());
end

def _print_i(arg_n, fd)
  var [8]s_temp;

  unparse_int(&s_temp, arg_n);
  _print_s(&s_temp, fd);
end

def print_i(arg_n)
  _print_i(arg_n, 1);
end

def print_i_e(arg_n)
  _print_i(arg_n, 2);
end

def unparse_int(dest_, arg_n)
  var n = arg_n;
  var div;
  var mod;
  var [8]buf;
  var digit = 0;
  var i;
  var dest_offset = 0;

  if (n < 0)
    aset(dest_, 0, 45); # -
    n = n * -1;
    dest_offset = 1;
  end

  while (true)
    if (n < 10)
      aset(&buf, digit, n);
      break;
    end

    div = __div(n, 10);
    mod = __mod(n, 10);
    aset(&buf, digit, mod);

    n = div;
    digit = digit + 1;
  end

  i = digit;
  while (__le(0, i))
    aset(
      dest_,
      dest_offset + __sub(digit, i),
      48 + aget(&buf, i)
    );
    i = __sub(i, 1);
  end

  aset(dest_, dest_offset + digit + 1, 0);
end

def panic(errno)
  putchar_e(C_LF());
  putchar_e( 69); # E
  putchar_e( 61); # =
  print_i_e(errno);
  putchar_e( 10); # LF
  _panic();
end

def read_stdin_all(dest_, limit)
  var i = 0;
  var c;

  while (true)
    if (i == limit)
      panic(146); # read_stdin_all: too large input
    end

    c = getchar();
    if (c == -1)
      aset(dest_, i, 0);
      break;
    end

    aset(dest_, i, c);
    i = i + 1;
  end
end

# debug print
def p_c(c)
  if (DEBUG())
    putchar( 47); # /
    putchar( 99); # c
    putchar( 61); # =
    print_i(c);
    putchar( 40); # (
    putchar(c);
    putchar( 41); # )
    putchar(C_LF());
  end
end

# debug print
def p_i(n)
  if (DEBUG())
    putchar( 47); # /
    putchar(110); # n
    putchar( 61); # =
    print_i(n);
    putchar(C_LF());
  end
end

# debug print
def p_i_kv(k, n)
  if (DEBUG())
    putchar(47); # /
    print_i(k);
    p_i(n);
  end
end

# debug print
def p_s(str_)
  var i;

  if (DEBUG())
    putchar(C_LF());
    putchar(C_LF());

    i = 0;
    while (i < str_size(str_))
      print_i(i);
      putchar(58); # :
      p_c(char_at(str_, i));
      i = i + 1;
    end

    putchar(C_LF());
    putchar(C_LF());
  end
end

def assert(exp, act, errno)
  if (exp != act)
    putchar(101); # e (expected)

    putchar(C_SPC());
    print_i(exp);
    putchar(C_COMMA());
    putchar(C_SPC());

    putchar( 97); # a (actual)
    putchar(C_SPC());
    print_i(act);
    putchar(C_LF());
    
    panic(errno);
  end
end

def aset(array_, i, val)
  *(array_ + i) = val;
end

def aget(array_, i)
  return *(array_ + i);
end

# --------------------------------

def str_cp(dest_, src_)
  var to = str_size(src_);

  substr(dest_, src_, 0, to);
end

# dest_size: size with sentinel
def str_cp_with_check(dest_, src_, dest_size)
  var to = str_size(src_);

  substr_with_check(dest_, src_, 0, to, dest_size);
end

# dest_size: size with sentinel
def append_str_with_check(dest_, str_, dest_size)
  var i;
  var c;
  var dest_offset = str_size(dest_);
  var append_size = str_size(str_);

  if ((dest_offset + append_size) < dest_size)
    i = 0;
    while (i < append_size)
      c = char_at(str_, i);
      aset(dest_, dest_offset + i, c);
      i = i + 1;
    end
    aset(dest_, dest_offset + append_size, 0);
  else
    p_i(dest_offset);
    p_i(append_size);
    p_i(dest_size);
    panic(281); # append_str_with_check: failed to append
  end
end

# dest_size: size with sentinel
def append_char_with_check(dest_, c, dest_size)
  var [2]s_temp;

  aset(&s_temp, 0, c);
  aset(&s_temp, 1, 0);

  append_str_with_check(dest_, &s_temp, dest_size);
end

def str_size(str_)
  var i = 0;
  var c = char_at(str_, i);

  while (c != 0)
    i = i + 1;
    c = char_at(str_, i);
  end

  return i;
end

def chomp(str_)
  var i = __sub(str_size(str_), 1);
  if (char_at(str_, i) == C_LF())
    aset(str_, i, 0);
  end
end

def substr(dest_, src_, from, to)
  var i = from;
  var dest_i = 0;

  while (true)
    if (__or(
      i == to,
      char_at(src_, i) == 0
    ))
      break;
    end

    aset(dest_, dest_i, char_at(src_, i));
    i = i + 1;
    dest_i = dest_i + 1;
  end

  aset(dest_, dest_i, 0);
end

# dest_size: size with sentinel
def substr_with_check(dest_, src_, from, to, dest_size)
  if (__sub(to, from) < dest_size)
    substr(dest_, src_, from, to);
  else
    p_i_kv(316, from);
    p_i_kv(317, to);
    p_i_kv(318, __sub(to, from));
    p_i_kv(319, dest_size);
    # p_s(src_);
    # print_s(src_);
    panic(290); # src string is longer than dest
  end
end

def str_eq(s1_, s2_)
  var i = 0;
  var c1;

  while (true)
    c1 = char_at(s1_, i);

    if (c1 == char_at(s2_, i))
      if (c1 == 0)
        break;
      end
    else
      return false;
    end

    i = i + 1;
  end

  return true;
end

def char_at(str_, i)
  return *(str_ + i);
end

def char_index(str_, target_c, pos_from)
  var pos = pos_from;
  var c;

  while (true)
    c = char_at(str_, pos);

    case
    when (c == target_c)
      return pos;
    when (c == 0)
      return -1;
    end

    pos = pos + 1;
  end

  panic(387); # char_index: must not happen
end

def parse_uint(s_)
  var i = __sub(str_size(s_), 1);
  var c;
  var digit_factor = 1;
  var n = 0;

  while (__le(0, i))
    c = char_at(s_, i);
    n = n + (__sub(c, 48) * digit_factor);

    digit_factor = digit_factor * 10;
    i = __sub(i, 1);
  end

  return n;
end

def parse_int(s_)
  if (char_at(s_, 0) == 45) # -
    return parse_uint(s_ + 1) * -1;
  else
    return parse_uint(s_);
  end
end

def is_digit_char(c)
  return range_include(48, 57, c);
end

def non_digit_index(str_, from)
  var c;
  var pos = from;

  while (true)
    c = char_at(str_, pos);
    if (is_digit_char(c) != true)
      break;
    end

    pos = pos + 1;
  end

  return pos;
end

def i_to_c(n)
  if (range_include(0, 9, n))
    return 48 + n;
  end

  panic(445); # i_to_c
end

def range_include(from, to, target)
  case
  when (target < from) return false;
  when (to < target  ) return false;
  else
    return true;
  end
end

# --------------------------------
# struct field

def fset(base, offset, val)
  *(base + offset) = val;
end

def fget(base, offset)
  return *(base + offset);
end

# --------------------------------

# TODO - 演算子を用意するまでの代替
def __sub(a, b)
  return a + (b * -1);
end

# TODO && 演算子を用意するまでの代替
def __and(a, b)
  if (a)
    if (b)
      return true;
    else
      return false;
    end
  else
    return false;
  end
end

# TODO || 演算子を用意するまでの代替
def __or(a, b)
  case
  when (a) return true;
  when (b) return true;
  else     return false;
  end
end

# TODO ! 演算子を用意するまでの代替
def __not(a)
  if (a)
    return false;
  else
    return true;
  end
end

# TODO <= 演算子を用意するまでの代替
def __le(a, b)
  case
  when (a == b)
    return true;
  when (a < b)
    return true;
  else
    return false;
  end
end

# TODO / 演算子を用意するまでの代替
def __div(a, b)
  var temp = a;
  var count = 0;

  while (__le(b, temp))
    temp = __sub(temp, b);
    count = count + 1;
  end

  return count;
end

# TODO % 演算子を用意するまでの代替
def __mod(a, b)
  var temp = a;

  while (__le(b, temp))
    temp = __sub(temp, b);
  end

  return temp;
end
