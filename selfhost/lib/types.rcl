# -*- mode: ruby -*-

def NODE_KIND__LIST() return 0; end
def NODE_KIND__INT () return 1; end
def NODE_KIND__STR () return 2; end

# --------------------------------

def STRING__TYPE_SIZE() return 40; end

def String_new(g_, str_)
  var self_ = allocate(g_, STRING__TYPE_SIZE());

  str_cp_with_check(self_, str_, STRING__TYPE_SIZE());

  return self_;
end

# --------------------------------

def NODE__KIND() return 0; end
def NODE__LIST() return 1; end
def NODE__INT () return 2; end
def NODE__STR () return 3; end

def NODE__TYPE_SIZE() return 4; end

def Node_new(g_)
  var self_ = allocate(g_, NODE__TYPE_SIZE());
  return self_;
end

def Node_new_int(g_, n)
  var self_ = Node_new(g_);

  fset(self_, NODE__KIND(), NODE_KIND__INT());
  fset(self_, NODE__INT(), n);

  return self_;
end

def Node_new_str(g_, str_)
  var self_ = Node_new(g_);

  fset(self_, NODE__KIND(), NODE_KIND__STR());
  fset(self_, NODE__STR(), String_new(g_, str_));

  return self_;
end

def Node_new_list(g_, list_)
  var self_ = Node_new(g_);

  fset(self_, NODE__KIND(), NODE_KIND__LIST());
  fset(self_, NODE__LIST(), list_);

  return self_;
end

def Node_get_kind(self_)
  var kind = *(self_ + NODE__KIND());
  return kind;
end

def Node_get_int(self_)
  assert(NODE_KIND__INT(), Node_get_kind(self_), 62);

  var n = *(self_ + NODE__INT());
  return n;
end

def Node_get_str(self_)
  assert(NODE_KIND__STR(), Node_get_kind(self_), 69);

  return *(self_ + NODE__STR());
end

def Node_get_list(self_)
  assert(NODE_KIND__LIST(), Node_get_kind(self_), 77);

  var nl_ = *(self_ + NODE__LIST());
  return nl_;
end

def Node_kind_eq(self_, kind)
  return Node_get_kind(self_) == kind;
end

# --------------------------------

def CONS_CELL__CAR() return 0; end
def CONS_CELL__CAR_WIDTH() return 1; end

def CONS_CELL__CDR() return 1; end
def CONS_CELL__CDR_WIDTH() return 1; end

def CONS_CELL__TYPE_SIZE()
  return (
      CONS_CELL__CAR_WIDTH()
    + CONS_CELL__CDR_WIDTH()
  );
end

def ConsCell_set_car(self_, car)
  fset(self_, CONS_CELL__CAR(), car);
end

def ConsCell_get_car(self_)
  return *(self_ + CONS_CELL__CAR());
end

def ConsCell_set_cdr(self_, cdr)
  fset(self_, CONS_CELL__CDR(), cdr);
end

def ConsCell_get_cdr(self_)
  return *(self_ + CONS_CELL__CDR());
end

def ConsCell_new(g_, car, cdr)
  var self_ = allocate(g_, CONS_CELL__TYPE_SIZE());

  ConsCell_set_car(self_, car);
  ConsCell_set_cdr(self_, cdr);

  return self_;
end

# --------------------------------

def LIST__CELL() return 0; end
def LIST__CELL_WIDTH() return 1; end

def LIST__SIZE() return 1; end
def LIST__SIZE_WIDTH() return 1; end

def LIST__TYPE_SIZE()
  return (
    LIST__CELL_WIDTH()
  + LIST__SIZE_WIDTH()
  );
end

def LIST_NULL() return 0; end

def List_set_cell(self_, cell_)
  fset(self_, LIST__CELL(), cell_);
end

def List_get_cell(self_)
  return *(self_ + LIST__CELL());
end

def List_set_size(self_, size)
  fset(self_, LIST__SIZE(), size);
end

def List_get_size(self_)
  return *(self_ + LIST__SIZE());
end

def List_new(g_)
  var self_ = allocate(g_, LIST__TYPE_SIZE());

  List_set_cell(self_, LIST_NULL());
  List_set_size(self_, 0);

  return self_;
end

def List_size(self_)
  return List_get_size(self_);
end

def List_add(g_, self_, node_)
  var cell_ = List_get_cell(self_);
  var new_cell_ = ConsCell_new(g_, node_, LIST_NULL());

  var size = List_get_size(self_);
  List_set_size(self_, size + 1);

  if (cell_ == LIST_NULL())
    List_set_cell(self_, new_cell_);
    return;
  end

  var work_ = cell_;
  var prev_ = cell_;

  while (work_ != LIST_NULL())
    prev_ = work_;
    work_ = ConsCell_get_cdr(work_);
  end

  ConsCell_set_cdr(prev_, new_cell_);
end

def List_add_all(g_, self_, list_)
  var i = 0;

  while (i < List_size(list_))
    List_add(g_, self_, List_get(list_, i));
    i = i + 1;
  end
end

def List_add_int(g_, self_, n)
  var node_ = Node_new_int(g_, n);
  List_add(g_, self_, node_);
end

def List_add_str(g_, self_, str_)
  var node_ = Node_new_str(g_, str_);
  List_add(g_, self_, node_);
end

def List_add_list(g_, self_, list_)
  var node_ = Node_new_list(g_, list_);
  List_add(g_, self_, node_);
end

def List_get(self_, i)
  var _i = 0;
  var work_ = List_get_cell(self_);

  while (true)
    if (_i == i)
      break;
    end

    _i = _i + 1;
    work_ = ConsCell_get_cdr(work_);
  end

  var node_ = ConsCell_get_car(work_);
  return node_;
end

def List_get_as_int(self_, i)
  var node_ = List_get(self_, i);
  return Node_get_int(node_);
end

def List_get_as_str(self_, i)
  var node_ = List_get(self_, i);
  return Node_get_str(node_);
end

def List_get_as_list(self_, i)
  var node_ = List_get(self_, i);
  return Node_get_list(node_);
end

def List_rest(g_, list_, n)
  var newlist_ = List_new(g_);
  var i = 0;
  var work_ = List_get_cell(list_);

  while (work_ != LIST_NULL())
    if (__le(n, i))
      List_add(g_, newlist_, ConsCell_get_car(work_));
    end

    i = i + 1;
    work_ = ConsCell_get_cdr(work_);
  end

  return newlist_;
end

# --------------------------------

def TOKEN_KIND__KW   () return 0; end
def TOKEN_KIND__SYM  () return 1; end
def TOKEN_KIND__INT  () return 2; end
def TOKEN_KIND__STR  () return 3; end
def TOKEN_KIND__IDENT() return 4; end

def TokenKind_from_str(str_)
  var c0 = char_at(str_, 0);
  var c1 = char_at(str_, 1);

  case
  when (c0 == 107) # k
    return TOKEN_KIND__KW();
  when (__and(c0 == 115, c1 == 121)) # sy
    return TOKEN_KIND__SYM();
  when (__and(c0 == 105, c1 == 110)) # in
    return TOKEN_KIND__INT();
  when (__and(c0 == 115, c1 == 116)) # st
    return TOKEN_KIND__STR();
  when (__and(c0 == 105, c1 == 100)) # id
    return TOKEN_KIND__IDENT();
  else
    panic(196); # TokenKind_from_str: invalid token kind string
  end
end

def TokenKind_to_str(str_, kind)
  case
  when (kind == TOKEN_KIND__KW())
    aset(str_, 0, 107); # k
    aset(str_, 1,   0);
  when (kind == TOKEN_KIND__SYM())
    aset(str_, 0, 115); # s
    aset(str_, 1, 121); # y
    aset(str_, 2,   0);
  when (kind == TOKEN_KIND__INT())
    aset(str_, 0, 105); # i
    aset(str_, 1, 110); # n
    aset(str_, 2,   0);
  when (kind == TOKEN_KIND__STR())
    aset(str_, 0, 115); # s
    aset(str_, 1, 116); # t
    aset(str_, 2,   0);
  when (kind == TOKEN_KIND__IDENT())
    aset(str_, 0, 105); # i
    aset(str_, 1, 100); # d
    aset(str_, 2,   0);
  else
    panic(222);
  end
end

# --------------------------------

def TOKEN__KIND() return 0; end
def TOKEN__VAL () return 1; end

def TOKEN__VAL_SIZE() return 40; end

def TOKEN__TYPE_SIZE () return 41; end

def Token_new(g_, kind_str_, str_)
  var self_ = allocate(g_, TOKEN__TYPE_SIZE());

  fset(self_, TOKEN__KIND(), TokenKind_from_str(kind_str_));

  str_cp_with_check(self_ + TOKEN__VAL(), str_, TOKEN__VAL_SIZE());

  return self_;
end

def Token_get_kind(self_)
  return *(self_ + TOKEN__KIND());
end

def Token_get_val(self_)
  return self_ + TOKEN__VAL();
end

def Token_kind_eq(self_, kind)
  return Token_get_kind(self_) == kind;
end

def Token_val_eq(self_, value_)
  return str_eq(Token_get_val(self_), value_);
end

def Token_to_plain(g_, self_)
  var list_ = List_new(g_);
  var kind = Token_get_kind(self_);
  var kind_str_ = allocate(g_, 3);

  TokenKind_to_str(kind_str_, kind);

  List_add_int(g_, list_, kind);
  List_add_str(g_, list_, kind_str_);
  List_add_str(g_, list_, Token_get_val(self_));

  return list_;
end

# --------------------------------

def NAME__WIDTH() return 0; end
def NAME__WIDTH_WIDTH() return 1; end

def NAME__STR() return 1; end
def NAME__STR_WIDTH() return 30; end

def NAME__TYPE_SIZE()
  return (
    NAME__WIDTH_WIDTH()
  + NAME__STR_WIDTH()
  );
end

def Name_new(g_, s_name_, width)
  var self_ = allocate(g_, NAME__TYPE_SIZE());

  fset(self_, NAME__WIDTH(), width);
  str_cp_with_check(self_ + NAME__STR(), s_name_, NAME__STR_WIDTH());

  return self_;
end

def Name_get_str(self_)
  return self_ + NAME__STR();
end

def Name_get_width(self_)
  return *(self_ + NAME__WIDTH());
end

# --------------------------------

def NAMES__SIZE() return 0; end
def NAMES__SIZE_WIDTH() return 1; end

def NAMES__ITEMS() return 1; end
def NAMES__ITEMS_WIDTH() return 14; end

def NAMES__TYPE_SIZE()
  return (
    NAMES__SIZE_WIDTH()
  + NAMES__ITEMS_WIDTH()
  );
end

def Names_new(g_)
  var self_ = allocate(g_, NAMES__TYPE_SIZE());

  fset(self_, NAMES__SIZE(), 0);

  return self_;
end

def Names_size(self_)
  return *(self_ + NAMES__SIZE());
end

def Names_get_items(self_)
  return self_ + NAMES__ITEMS();
end

def Names_add(g_, self_, s_name_, width)
  var size = Names_size(self_);
  var name_;
  var items_;

  if (__le(NAMES__ITEMS_WIDTH(), size))
    p_i(NAMES__ITEMS_WIDTH());
    p_i(size);
    panic(316);
  end

  name_ = Name_new(g_, s_name_, width);
  items_ = Names_get_items(self_);
  aset(items_, size, name_);

  fset(self_, NAMES__SIZE(), size + 1);
end

def Names_get(self_, i)
  var items_ = Names_get_items(self_);

  return aget(items_, i);
end

def Names_get_str(self_, i)
  var name_ = Names_get(self_, i);
  return Name_get_str(name_);
end

def Names_get_width(self_, i)
  var name_ = Names_get(self_, i);
  return Name_get_width(name_);
end

def Names_index(self_, target_name_)
  var i;
  var size = Names_size(self_);
  var s_name_;

  i = 0;
  while (true)
    s_name_ = Names_get_str(self_, i);
    case
    when (__le(size, i))
      return -1;
    when (str_eq(s_name_, target_name_))
      return i;
    end
    i = i + 1;
  end

  panic(480); # Names_index: must not happen
end

def Names_includes(self_, target_name_)
  var i = Names_index(self_, target_name_);

  return __le(0, i);
end

def Names_disp_lvar(self_, target_name_)
  var i;
  var disp = 0;
  var s_name_;
  var width;
  var size = Names_size(self_);

  i = 0;
  while (true)
    if (__le(size, i))
      break;
    end

    s_name_ = Names_get_str(self_, i);
    width = Names_get_width(self_, i);
    disp = __sub(disp, width);
    if (str_eq(s_name_, target_name_))
      break;
    end

    i = i + 1;
  end

  return disp;
end

def Names_from_node_list(g_, list_)
  var names_ = Names_new(g_);
  var i;
  var size = List_size(list_);

  i = 0;
  while (i < size)
    Names_add(
      g_,
      names_,
      List_get_as_str(list_, i),
      1
    );
    i = i + 1;
  end

  return names_;
end

def Names_to_plain(g_, self_)
  var list_ = List_new(g_);
  var i = 0;
  var size = Names_size(self_);

  while (i < size)
    List_add_str(g_, list_, Names_get_str(self_, i));
    List_add_int(g_, list_, Names_get_width(self_, i));
    i = i + 1;
  end

  return list_;
end
