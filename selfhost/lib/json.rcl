# -*- mode: ruby -*-

def Json_print_indent(lv)
  var i = lv;
  while (0 < i)
    putchar(C_SPC());
    putchar(C_SPC());
    i = i + -1;
  end
end

def _Json_print_node(node_, lv)
  var kind;
  var int_val;
  var str_;
  var list_;

  kind = Node_get_kind(node_);

  case
  when (kind == NODE_KIND__INT())
    int_val = Node_get_int(node_);
    Json_print_indent(lv);
    print_i(int_val);
  when (kind == NODE_KIND__STR())
    str_ = Node_get_str(node_);
    Json_print_indent(lv);
    putchar(C_DQ());
    print_s(str_);
    putchar(C_DQ());
  when (kind == NODE_KIND__LIST())
    list_ = Node_get_list(node_);
    Json_print_list(list_, lv);
  else
    panic(35); # _Json_print_node: unknown node kind
  end
end

def Json_print_node(node_)
  _Json_print_node(node_, 0);
end

def Json_print_list(list_, lv)
  var size = List_size(list_);
  var i;
  var node_;

  Json_print_indent(lv);
  putchar(91); # [
  putchar(C_LF());

  i = 0;
  while (i < size)
    node_ = List_get(list_, i);
    _Json_print_node(node_, lv + 1);

    if (i < (size + -1))
      putchar(C_COMMA());
    end
    putchar(C_LF());

    i = i + 1;
  end

  Json_print_indent(lv);
  putchar(93); # ]
end

def Json_print(list_)
  Json_print_list(list_, 0);
  putchar(C_LF());
end

def Json_parse_int(rest_, pos, size_)
  var pos_start;
  var pos_end;
  var n;
  var [8]s_temp;

  if (char_at(rest_, pos) == 45) # -
    pos_start = pos + 1;
  else
    pos_start = pos;
  end

  pos_end = non_digit_index(rest_, pos_start);
  substr(&s_temp, rest_, pos, pos_end);
  n = parse_int(&s_temp);

  *(size_) = __sub(pos_end, pos);
  return n;
end

def Json_parse_str(rest_, pos, s_temp_, s_temp_size, size_)
  var pos_end;

  pos_end = char_index(rest_, C_DQ(), pos + 1);
  substr_with_check(s_temp_, rest_, pos + 1, pos_end, s_temp_size);
  *(size_) = __sub(pos_end + 1, pos);
end

def Json_parse_list(g_, rest_, pos_start, size_)
  var pos = pos_start;
  var size = 0;
  var list_;
  var c;
  var s_temp_size = 40; var [40]s_temp;
  var n;
  var child_list_;

  assert(
    91, # [
    char_at(rest_, pos),
    108 # Json_parse_list: first char should be [
  );
  pos = pos + 1;

  list_ = List_new(g_);

  while (true)
    c = char_at(rest_, pos);

    case
    when (c == 93) # ]
      pos = pos + 1;
      break;

    when (c == 91) # [
      child_list_ = Json_parse_list(g_, rest_, pos, &size);
      List_add_list(g_, list_, child_list_);
      pos = pos + size;

    when (c == C_LF()   ) pos = pos + 1;
    when (c == C_SPC()  ) pos = pos + 1;
    when (c == C_COMMA()) pos = pos + 1;

    when (__or(
            is_digit_char(c),
            c == 45 # -
          ))
      n = Json_parse_int(rest_, pos, &size);
      List_add_int(g_, list_, n);
      pos = pos + size;

    when (c == C_DQ())
      Json_parse_str(rest_, pos, &s_temp, s_temp_size, &size);
      List_add_str(g_, list_, &s_temp);
      pos = pos + size;

    when (c == 0)
      p_c(c);
      panic(150); # Json_parse_list: must not happen

    else
      p_c(c);
      panic(142);
    end
  end

  *(size_) = __sub(pos, pos_start);
  return list_;
end

def Json_parse(g_, json_)
  var list_;
  var size;

  list_ = Json_parse_list(g_, json_, 0, &size);

  return list_;
end
