# -*- mode: ruby -*-

#include ../selfhost/lib/std.rcl
#include ../selfhost/lib/types.rcl

def is_prime(primes_, n)
  var i;
  var prime;

  i = 0;
  while (i < List_size(primes_))
    prime = List_get_as_int(primes_, i);

    case
    when (n < (prime * prime))
      return true;
    when (__mod(n, prime) == 0)
      return false;
    end

    i = i + 1;
  end

  return true;
end

def main()
  var [2]g;
  var n;
  var primes_;

  # init globals
  init_globals(&g);
  init_alloc_cursor(&g);

  primes_ = List_new(&g);

  n = 2;
  while (n < 101)
    if (is_prime(primes_, n))
      print_i(n);
      putchar(C_LF());

      List_add_int(&g, primes_, n);
    end

    n = n + 1;
  end
end
